/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.PreparedStatement */
public class PreparedStatementProxy extends JdbcProxy implements java.sql.PreparedStatement
{
  /**
   * Constructs a new PreparedStatementProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public PreparedStatementProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.PreparedStatement.class, proxyObject);
  }

  /** public abstract void java.sql.PreparedStatement.setBoolean(int,boolean) throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.PreparedStatement.class, "setBoolean", new Class[] {int.class, boolean.class});
  public void setBoolean(int p0, boolean p1) throws java.sql.SQLException
  {
    invoke(m0, new Object[] {new Integer(p0), new Boolean(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setByte(int,byte) throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.PreparedStatement.class, "setByte", new Class[] {int.class, byte.class});
  public void setByte(int p0, byte p1) throws java.sql.SQLException
  {
    invoke(m1, new Object[] {new Integer(p0), new Byte(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setDouble(int,double) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.PreparedStatement.class, "setDouble", new Class[] {int.class, double.class});
  public void setDouble(int p0, double p1) throws java.sql.SQLException
  {
    invoke(m2, new Object[] {new Integer(p0), new Double(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setFloat(int,float) throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.PreparedStatement.class, "setFloat", new Class[] {int.class, float.class});
  public void setFloat(int p0, float p1) throws java.sql.SQLException
  {
    invoke(m3, new Object[] {new Integer(p0), new Float(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setInt(int,int) throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.PreparedStatement.class, "setInt", new Class[] {int.class, int.class});
  public void setInt(int p0, int p1) throws java.sql.SQLException
  {
    invoke(m4, new Object[] {new Integer(p0), new Integer(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setLong(int,long) throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.PreparedStatement.class, "setLong", new Class[] {int.class, long.class});
  public void setLong(int p0, long p1) throws java.sql.SQLException
  {
    invoke(m5, new Object[] {new Integer(p0), new Long(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setShort(int,short) throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.PreparedStatement.class, "setShort", new Class[] {int.class, short.class});
  public void setShort(int p0, short p1) throws java.sql.SQLException
  {
    invoke(m6, new Object[] {new Integer(p0), new Short(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp) throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.PreparedStatement.class, "setTimestamp", new Class[] {int.class, java.sql.Timestamp.class});
  public void setTimestamp(int p0, java.sql.Timestamp p1) throws java.sql.SQLException
  {
    invoke(m7, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.PreparedStatement.class, "setTimestamp", new Class[] {int.class, java.sql.Timestamp.class, java.util.Calendar.class});
  public void setTimestamp(int p0, java.sql.Timestamp p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m8, new Object[] {new Integer(p0), p1, p2});
  }

  /** public abstract void java.sql.PreparedStatement.setURL(int,java.net.URL) throws java.sql.SQLException */
  private static final Method m9 = getMethod(java.sql.PreparedStatement.class, "setURL", new Class[] {int.class, java.net.URL.class});
  public void setURL(int p0, java.net.URL p1) throws java.sql.SQLException
  {
    invoke(m9, new Object[] {new Integer(p0), p1});
  }

  /** public abstract boolean java.sql.PreparedStatement.execute() throws java.sql.SQLException */
  private static final Method m10 = getMethod(java.sql.PreparedStatement.class, "execute", new Class[] {});
  public boolean execute() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m10, new Object[] {})).booleanValue();
  }

  /** public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m11 = getMethod(java.sql.PreparedStatement.class, "setBinaryStream", new Class[] {int.class, java.io.InputStream.class, int.class});
  public void setBinaryStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m11, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setBytes(int,byte[]) throws java.sql.SQLException */
  private static final Method m12 = getMethod(java.sql.PreparedStatement.class, "setBytes", new Class[] {int.class, byte[].class});
  public void setBytes(int p0, byte[] p1) throws java.sql.SQLException
  {
    invoke(m12, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m13 = getMethod(java.sql.PreparedStatement.class, "setAsciiStream", new Class[] {int.class, java.io.InputStream.class, int.class});
  public void setAsciiStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m13, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setBigDecimal(int,java.math.BigDecimal) throws java.sql.SQLException */
  private static final Method m14 = getMethod(java.sql.PreparedStatement.class, "setBigDecimal", new Class[] {int.class, java.math.BigDecimal.class});
  public void setBigDecimal(int p0, java.math.BigDecimal p1) throws java.sql.SQLException
  {
    invoke(m14, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,int) throws java.sql.SQLException */
  private static final Method m15 = getMethod(java.sql.PreparedStatement.class, "setCharacterStream", new Class[] {int.class, java.io.Reader.class, int.class});
  public void setCharacterStream(int p0, java.io.Reader p1, int p2) throws java.sql.SQLException
  {
    invoke(m15, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m16 = getMethod(java.sql.PreparedStatement.class, "setDate", new Class[] {int.class, java.sql.Date.class, java.util.Calendar.class});
  public void setDate(int p0, java.sql.Date p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m16, new Object[] {new Integer(p0), p1, p2});
  }

  /** public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date) throws java.sql.SQLException */
  private static final Method m17 = getMethod(java.sql.PreparedStatement.class, "setDate", new Class[] {int.class, java.sql.Date.class});
  public void setDate(int p0, java.sql.Date p1) throws java.sql.SQLException
  {
    invoke(m17, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setNull(int,int,java.lang.String) throws java.sql.SQLException */
  private static final Method m18 = getMethod(java.sql.PreparedStatement.class, "setNull", new Class[] {int.class, int.class, java.lang.String.class});
  public void setNull(int p0, int p1, java.lang.String p2) throws java.sql.SQLException
  {
    invoke(m18, new Object[] {new Integer(p0), new Integer(p1), p2});
  }

  /** public abstract void java.sql.PreparedStatement.setNull(int,int) throws java.sql.SQLException */
  private static final Method m19 = getMethod(java.sql.PreparedStatement.class, "setNull", new Class[] {int.class, int.class});
  public void setNull(int p0, int p1) throws java.sql.SQLException
  {
    invoke(m19, new Object[] {new Integer(p0), new Integer(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int,int) throws java.sql.SQLException */
  private static final Method m20 = getMethod(java.sql.PreparedStatement.class, "setObject", new Class[] {int.class, java.lang.Object.class, int.class, int.class});
  public void setObject(int p0, java.lang.Object p1, int p2, int p3) throws java.sql.SQLException
  {
    invoke(m20, new Object[] {new Integer(p0), p1, new Integer(p2), new Integer(p3)});
  }

  /** public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object) throws java.sql.SQLException */
  private static final Method m21 = getMethod(java.sql.PreparedStatement.class, "setObject", new Class[] {int.class, java.lang.Object.class});
  public void setObject(int p0, java.lang.Object p1) throws java.sql.SQLException
  {
    invoke(m21, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int) throws java.sql.SQLException */
  private static final Method m22 = getMethod(java.sql.PreparedStatement.class, "setObject", new Class[] {int.class, java.lang.Object.class, int.class});
  public void setObject(int p0, java.lang.Object p1, int p2) throws java.sql.SQLException
  {
    invoke(m22, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setString(int,java.lang.String) throws java.sql.SQLException */
  private static final Method m23 = getMethod(java.sql.PreparedStatement.class, "setString", new Class[] {int.class, java.lang.String.class});
  public void setString(int p0, java.lang.String p1) throws java.sql.SQLException
  {
    invoke(m23, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m24 = getMethod(java.sql.PreparedStatement.class, "setTime", new Class[] {int.class, java.sql.Time.class, java.util.Calendar.class});
  public void setTime(int p0, java.sql.Time p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m24, new Object[] {new Integer(p0), p1, p2});
  }

  /** public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time) throws java.sql.SQLException */
  private static final Method m25 = getMethod(java.sql.PreparedStatement.class, "setTime", new Class[] {int.class, java.sql.Time.class});
  public void setTime(int p0, java.sql.Time p1) throws java.sql.SQLException
  {
    invoke(m25, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.addBatch() throws java.sql.SQLException */
  private static final Method m26 = getMethod(java.sql.PreparedStatement.class, "addBatch", new Class[] {});
  public void addBatch() throws java.sql.SQLException
  {
    invoke(m26, new Object[] {});
  }

  /** public abstract void java.sql.PreparedStatement.clearParameters() throws java.sql.SQLException */
  private static final Method m27 = getMethod(java.sql.PreparedStatement.class, "clearParameters", new Class[] {});
  public void clearParameters() throws java.sql.SQLException
  {
    invoke(m27, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.PreparedStatement.executeQuery() throws java.sql.SQLException */
  private static final Method m28 = getMethod(java.sql.PreparedStatement.class, "executeQuery", new Class[] {});
  public java.sql.ResultSet executeQuery() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m28, new Object[] {});
  }

  /** public abstract int java.sql.PreparedStatement.executeUpdate() throws java.sql.SQLException */
  private static final Method m29 = getMethod(java.sql.PreparedStatement.class, "executeUpdate", new Class[] {});
  public int executeUpdate() throws java.sql.SQLException
  {
    return ((Integer)invoke(m29, new Object[] {})).intValue();
  }

  /** public abstract java.sql.ResultSetMetaData java.sql.PreparedStatement.getMetaData() throws java.sql.SQLException */
  private static final Method m30 = getMethod(java.sql.PreparedStatement.class, "getMetaData", new Class[] {});
  public java.sql.ResultSetMetaData getMetaData() throws java.sql.SQLException
  {
    return (java.sql.ResultSetMetaData)invoke(m30, new Object[] {});
  }

  /** public abstract java.sql.ParameterMetaData java.sql.PreparedStatement.getParameterMetaData() throws java.sql.SQLException */
  private static final Method m31 = getMethod(java.sql.PreparedStatement.class, "getParameterMetaData", new Class[] {});
  public java.sql.ParameterMetaData getParameterMetaData() throws java.sql.SQLException
  {
    return (java.sql.ParameterMetaData)invoke(m31, new Object[] {});
  }

  /** public abstract void java.sql.PreparedStatement.setArray(int,java.sql.Array) throws java.sql.SQLException */
  private static final Method m32 = getMethod(java.sql.PreparedStatement.class, "setArray", new Class[] {int.class, java.sql.Array.class});
  public void setArray(int p0, java.sql.Array p1) throws java.sql.SQLException
  {
    invoke(m32, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setBlob(int,java.sql.Blob) throws java.sql.SQLException */
  private static final Method m33 = getMethod(java.sql.PreparedStatement.class, "setBlob", new Class[] {int.class, java.sql.Blob.class});
  public void setBlob(int p0, java.sql.Blob p1) throws java.sql.SQLException
  {
    invoke(m33, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setClob(int,java.sql.Clob) throws java.sql.SQLException */
  private static final Method m34 = getMethod(java.sql.PreparedStatement.class, "setClob", new Class[] {int.class, java.sql.Clob.class});
  public void setClob(int p0, java.sql.Clob p1) throws java.sql.SQLException
  {
    invoke(m34, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setRef(int,java.sql.Ref) throws java.sql.SQLException */
  private static final Method m35 = getMethod(java.sql.PreparedStatement.class, "setRef", new Class[] {int.class, java.sql.Ref.class});
  public void setRef(int p0, java.sql.Ref p1) throws java.sql.SQLException
  {
    invoke(m35, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setUnicodeStream(int,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m36 = getMethod(java.sql.PreparedStatement.class, "setUnicodeStream", new Class[] {int.class, java.io.InputStream.class, int.class});
  public void setUnicodeStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m36, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.Statement.close() throws java.sql.SQLException */
  private static final Method m37 = getMethod(java.sql.PreparedStatement.class, "close", new Class[] {});
  public void close() throws java.sql.SQLException
  {
    invoke(m37, new Object[] {});
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String,java.lang.String[]) throws java.sql.SQLException */
  private static final Method m38 = getMethod(java.sql.PreparedStatement.class, "execute", new Class[] {java.lang.String.class, java.lang.String[].class});
  public boolean execute(java.lang.String p0, java.lang.String[] p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m38, new Object[] {p0, p1})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String,int) throws java.sql.SQLException */
  private static final Method m39 = getMethod(java.sql.PreparedStatement.class, "execute", new Class[] {java.lang.String.class, int.class});
  public boolean execute(java.lang.String p0, int p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m39, new Object[] {p0, new Integer(p1)})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String) throws java.sql.SQLException */
  private static final Method m40 = getMethod(java.sql.PreparedStatement.class, "execute", new Class[] {java.lang.String.class});
  public boolean execute(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m40, new Object[] {p0})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String,int[]) throws java.sql.SQLException */
  private static final Method m41 = getMethod(java.sql.PreparedStatement.class, "execute", new Class[] {java.lang.String.class, int[].class});
  public boolean execute(java.lang.String p0, int[] p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m41, new Object[] {p0, p1})).booleanValue();
  }

  /** public abstract java.sql.ResultSet java.sql.Statement.getResultSet() throws java.sql.SQLException */
  private static final Method m42 = getMethod(java.sql.PreparedStatement.class, "getResultSet", new Class[] {});
  public java.sql.ResultSet getResultSet() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m42, new Object[] {});
  }

  /** public abstract void java.sql.Statement.addBatch(java.lang.String) throws java.sql.SQLException */
  private static final Method m43 = getMethod(java.sql.PreparedStatement.class, "addBatch", new Class[] {java.lang.String.class});
  public void addBatch(java.lang.String p0) throws java.sql.SQLException
  {
    invoke(m43, new Object[] {p0});
  }

  /** public abstract java.sql.ResultSet java.sql.Statement.executeQuery(java.lang.String) throws java.sql.SQLException */
  private static final Method m44 = getMethod(java.sql.PreparedStatement.class, "executeQuery", new Class[] {java.lang.String.class});
  public java.sql.ResultSet executeQuery(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m44, new Object[] {p0});
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String,java.lang.String[]) throws java.sql.SQLException */
  private static final Method m45 = getMethod(java.sql.PreparedStatement.class, "executeUpdate", new Class[] {java.lang.String.class, java.lang.String[].class});
  public int executeUpdate(java.lang.String p0, java.lang.String[] p1) throws java.sql.SQLException
  {
    return ((Integer)invoke(m45, new Object[] {p0, p1})).intValue();
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String) throws java.sql.SQLException */
  private static final Method m46 = getMethod(java.sql.PreparedStatement.class, "executeUpdate", new Class[] {java.lang.String.class});
  public int executeUpdate(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m46, new Object[] {p0})).intValue();
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String,int) throws java.sql.SQLException */
  private static final Method m47 = getMethod(java.sql.PreparedStatement.class, "executeUpdate", new Class[] {java.lang.String.class, int.class});
  public int executeUpdate(java.lang.String p0, int p1) throws java.sql.SQLException
  {
    return ((Integer)invoke(m47, new Object[] {p0, new Integer(p1)})).intValue();
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String,int[]) throws java.sql.SQLException */
  private static final Method m48 = getMethod(java.sql.PreparedStatement.class, "executeUpdate", new Class[] {java.lang.String.class, int[].class});
  public int executeUpdate(java.lang.String p0, int[] p1) throws java.sql.SQLException
  {
    return ((Integer)invoke(m48, new Object[] {p0, p1})).intValue();
  }

  /** public abstract void java.sql.Statement.cancel() throws java.sql.SQLException */
  private static final Method m49 = getMethod(java.sql.PreparedStatement.class, "cancel", new Class[] {});
  public void cancel() throws java.sql.SQLException
  {
    invoke(m49, new Object[] {});
  }

  /** public abstract void java.sql.Statement.clearBatch() throws java.sql.SQLException */
  private static final Method m50 = getMethod(java.sql.PreparedStatement.class, "clearBatch", new Class[] {});
  public void clearBatch() throws java.sql.SQLException
  {
    invoke(m50, new Object[] {});
  }

  /** public abstract void java.sql.Statement.clearWarnings() throws java.sql.SQLException */
  private static final Method m51 = getMethod(java.sql.PreparedStatement.class, "clearWarnings", new Class[] {});
  public void clearWarnings() throws java.sql.SQLException
  {
    invoke(m51, new Object[] {});
  }

  /** public abstract int[] java.sql.Statement.executeBatch() throws java.sql.SQLException */
  private static final Method m52 = getMethod(java.sql.PreparedStatement.class, "executeBatch", new Class[] {});
  public int[] executeBatch() throws java.sql.SQLException
  {
    return (int[])invoke(m52, new Object[] {});
  }

  /** public abstract java.sql.Connection java.sql.Statement.getConnection() throws java.sql.SQLException */
  private static final Method m53 = getMethod(java.sql.PreparedStatement.class, "getConnection", new Class[] {});
  public java.sql.Connection getConnection() throws java.sql.SQLException
  {
    return (java.sql.Connection)invoke(m53, new Object[] {});
  }

  /** public abstract int java.sql.Statement.getFetchDirection() throws java.sql.SQLException */
  private static final Method m54 = getMethod(java.sql.PreparedStatement.class, "getFetchDirection", new Class[] {});
  public int getFetchDirection() throws java.sql.SQLException
  {
    return ((Integer)invoke(m54, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getFetchSize() throws java.sql.SQLException */
  private static final Method m55 = getMethod(java.sql.PreparedStatement.class, "getFetchSize", new Class[] {});
  public int getFetchSize() throws java.sql.SQLException
  {
    return ((Integer)invoke(m55, new Object[] {})).intValue();
  }

  /** public abstract java.sql.ResultSet java.sql.Statement.getGeneratedKeys() throws java.sql.SQLException */
  private static final Method m56 = getMethod(java.sql.PreparedStatement.class, "getGeneratedKeys", new Class[] {});
  public java.sql.ResultSet getGeneratedKeys() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m56, new Object[] {});
  }

  /** public abstract int java.sql.Statement.getMaxFieldSize() throws java.sql.SQLException */
  private static final Method m57 = getMethod(java.sql.PreparedStatement.class, "getMaxFieldSize", new Class[] {});
  public int getMaxFieldSize() throws java.sql.SQLException
  {
    return ((Integer)invoke(m57, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getMaxRows() throws java.sql.SQLException */
  private static final Method m58 = getMethod(java.sql.PreparedStatement.class, "getMaxRows", new Class[] {});
  public int getMaxRows() throws java.sql.SQLException
  {
    return ((Integer)invoke(m58, new Object[] {})).intValue();
  }

  /** public abstract boolean java.sql.Statement.getMoreResults(int) throws java.sql.SQLException */
  private static final Method m59 = getMethod(java.sql.PreparedStatement.class, "getMoreResults", new Class[] {int.class});
  public boolean getMoreResults(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m59, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.getMoreResults() throws java.sql.SQLException */
  private static final Method m60 = getMethod(java.sql.PreparedStatement.class, "getMoreResults", new Class[] {});
  public boolean getMoreResults() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m60, new Object[] {})).booleanValue();
  }

  /** public abstract int java.sql.Statement.getQueryTimeout() throws java.sql.SQLException */
  private static final Method m61 = getMethod(java.sql.PreparedStatement.class, "getQueryTimeout", new Class[] {});
  public int getQueryTimeout() throws java.sql.SQLException
  {
    return ((Integer)invoke(m61, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getResultSetConcurrency() throws java.sql.SQLException */
  private static final Method m62 = getMethod(java.sql.PreparedStatement.class, "getResultSetConcurrency", new Class[] {});
  public int getResultSetConcurrency() throws java.sql.SQLException
  {
    return ((Integer)invoke(m62, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getResultSetHoldability() throws java.sql.SQLException */
  private static final Method m63 = getMethod(java.sql.PreparedStatement.class, "getResultSetHoldability", new Class[] {});
  public int getResultSetHoldability() throws java.sql.SQLException
  {
    return ((Integer)invoke(m63, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getResultSetType() throws java.sql.SQLException */
  private static final Method m64 = getMethod(java.sql.PreparedStatement.class, "getResultSetType", new Class[] {});
  public int getResultSetType() throws java.sql.SQLException
  {
    return ((Integer)invoke(m64, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getUpdateCount() throws java.sql.SQLException */
  private static final Method m65 = getMethod(java.sql.PreparedStatement.class, "getUpdateCount", new Class[] {});
  public int getUpdateCount() throws java.sql.SQLException
  {
    return ((Integer)invoke(m65, new Object[] {})).intValue();
  }

  /** public abstract java.sql.SQLWarning java.sql.Statement.getWarnings() throws java.sql.SQLException */
  private static final Method m66 = getMethod(java.sql.PreparedStatement.class, "getWarnings", new Class[] {});
  public java.sql.SQLWarning getWarnings() throws java.sql.SQLException
  {
    return (java.sql.SQLWarning)invoke(m66, new Object[] {});
  }

  /** public abstract void java.sql.Statement.setCursorName(java.lang.String) throws java.sql.SQLException */
  private static final Method m67 = getMethod(java.sql.PreparedStatement.class, "setCursorName", new Class[] {java.lang.String.class});
  public void setCursorName(java.lang.String p0) throws java.sql.SQLException
  {
    invoke(m67, new Object[] {p0});
  }

  /** public abstract void java.sql.Statement.setEscapeProcessing(boolean) throws java.sql.SQLException */
  private static final Method m68 = getMethod(java.sql.PreparedStatement.class, "setEscapeProcessing", new Class[] {boolean.class});
  public void setEscapeProcessing(boolean p0) throws java.sql.SQLException
  {
    invoke(m68, new Object[] {new Boolean(p0)});
  }

  /** public abstract void java.sql.Statement.setFetchDirection(int) throws java.sql.SQLException */
  private static final Method m69 = getMethod(java.sql.PreparedStatement.class, "setFetchDirection", new Class[] {int.class});
  public void setFetchDirection(int p0) throws java.sql.SQLException
  {
    invoke(m69, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setFetchSize(int) throws java.sql.SQLException */
  private static final Method m70 = getMethod(java.sql.PreparedStatement.class, "setFetchSize", new Class[] {int.class});
  public void setFetchSize(int p0) throws java.sql.SQLException
  {
    invoke(m70, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setMaxFieldSize(int) throws java.sql.SQLException */
  private static final Method m71 = getMethod(java.sql.PreparedStatement.class, "setMaxFieldSize", new Class[] {int.class});
  public void setMaxFieldSize(int p0) throws java.sql.SQLException
  {
    invoke(m71, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setMaxRows(int) throws java.sql.SQLException */
  private static final Method m72 = getMethod(java.sql.PreparedStatement.class, "setMaxRows", new Class[] {int.class});
  public void setMaxRows(int p0) throws java.sql.SQLException
  {
    invoke(m72, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setQueryTimeout(int) throws java.sql.SQLException */
  private static final Method m73 = getMethod(java.sql.PreparedStatement.class, "setQueryTimeout", new Class[] {int.class});
  public void setQueryTimeout(int p0) throws java.sql.SQLException
  {
    invoke(m73, new Object[] {new Integer(p0)});
  }
}
