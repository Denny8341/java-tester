/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.SQLInput */
public class SQLInputProxy extends JdbcProxy implements java.sql.SQLInput
{
  /**
   * Constructs a new SQLInputProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public SQLInputProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.SQLInput.class, proxyObject);
  }

  /** public abstract int java.sql.SQLInput.readInt() throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.SQLInput.class, "readInt", new Class[] {});
  public int readInt() throws java.sql.SQLException
  {
    return ((Integer)invoke(m0, new Object[] {})).intValue();
  }

  /** public abstract java.lang.Object java.sql.SQLInput.readObject() throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.SQLInput.class, "readObject", new Class[] {});
  public java.lang.Object readObject() throws java.sql.SQLException
  {
    return (java.lang.Object)invoke(m1, new Object[] {});
  }

  /** public abstract byte java.sql.SQLInput.readByte() throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.SQLInput.class, "readByte", new Class[] {});
  public byte readByte() throws java.sql.SQLException
  {
    return ((Byte)invoke(m2, new Object[] {})).byteValue();
  }

  /** public abstract long java.sql.SQLInput.readLong() throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.SQLInput.class, "readLong", new Class[] {});
  public long readLong() throws java.sql.SQLException
  {
    return ((Long)invoke(m3, new Object[] {})).longValue();
  }

  /** public abstract short java.sql.SQLInput.readShort() throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.SQLInput.class, "readShort", new Class[] {});
  public short readShort() throws java.sql.SQLException
  {
    return ((Short)invoke(m4, new Object[] {})).shortValue();
  }

  /** public abstract byte[] java.sql.SQLInput.readBytes() throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.SQLInput.class, "readBytes", new Class[] {});
  public byte[] readBytes() throws java.sql.SQLException
  {
    return (byte[])invoke(m5, new Object[] {});
  }

  /** public abstract float java.sql.SQLInput.readFloat() throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.SQLInput.class, "readFloat", new Class[] {});
  public float readFloat() throws java.sql.SQLException
  {
    return ((Float)invoke(m6, new Object[] {})).floatValue();
  }

  /** public abstract boolean java.sql.SQLInput.wasNull() throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.SQLInput.class, "wasNull", new Class[] {});
  public boolean wasNull() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m7, new Object[] {})).booleanValue();
  }

  /** public abstract java.sql.Array java.sql.SQLInput.readArray() throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.SQLInput.class, "readArray", new Class[] {});
  public java.sql.Array readArray() throws java.sql.SQLException
  {
    return (java.sql.Array)invoke(m8, new Object[] {});
  }

  /** public abstract java.io.InputStream java.sql.SQLInput.readAsciiStream() throws java.sql.SQLException */
  private static final Method m9 = getMethod(java.sql.SQLInput.class, "readAsciiStream", new Class[] {});
  public java.io.InputStream readAsciiStream() throws java.sql.SQLException
  {
    return (java.io.InputStream)invoke(m9, new Object[] {});
  }

  /** public abstract java.math.BigDecimal java.sql.SQLInput.readBigDecimal() throws java.sql.SQLException */
  private static final Method m10 = getMethod(java.sql.SQLInput.class, "readBigDecimal", new Class[] {});
  public java.math.BigDecimal readBigDecimal() throws java.sql.SQLException
  {
    return (java.math.BigDecimal)invoke(m10, new Object[] {});
  }

  /** public abstract java.io.InputStream java.sql.SQLInput.readBinaryStream() throws java.sql.SQLException */
  private static final Method m11 = getMethod(java.sql.SQLInput.class, "readBinaryStream", new Class[] {});
  public java.io.InputStream readBinaryStream() throws java.sql.SQLException
  {
    return (java.io.InputStream)invoke(m11, new Object[] {});
  }

  /** public abstract java.sql.Blob java.sql.SQLInput.readBlob() throws java.sql.SQLException */
  private static final Method m12 = getMethod(java.sql.SQLInput.class, "readBlob", new Class[] {});
  public java.sql.Blob readBlob() throws java.sql.SQLException
  {
    return (java.sql.Blob)invoke(m12, new Object[] {});
  }

  /** public abstract boolean java.sql.SQLInput.readBoolean() throws java.sql.SQLException */
  private static final Method m13 = getMethod(java.sql.SQLInput.class, "readBoolean", new Class[] {});
  public boolean readBoolean() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m13, new Object[] {})).booleanValue();
  }

  /** public abstract java.io.Reader java.sql.SQLInput.readCharacterStream() throws java.sql.SQLException */
  private static final Method m14 = getMethod(java.sql.SQLInput.class, "readCharacterStream", new Class[] {});
  public java.io.Reader readCharacterStream() throws java.sql.SQLException
  {
    return (java.io.Reader)invoke(m14, new Object[] {});
  }

  /** public abstract java.sql.Clob java.sql.SQLInput.readClob() throws java.sql.SQLException */
  private static final Method m15 = getMethod(java.sql.SQLInput.class, "readClob", new Class[] {});
  public java.sql.Clob readClob() throws java.sql.SQLException
  {
    return (java.sql.Clob)invoke(m15, new Object[] {});
  }

  /** public abstract java.sql.Date java.sql.SQLInput.readDate() throws java.sql.SQLException */
  private static final Method m16 = getMethod(java.sql.SQLInput.class, "readDate", new Class[] {});
  public java.sql.Date readDate() throws java.sql.SQLException
  {
    return (java.sql.Date)invoke(m16, new Object[] {});
  }

  /** public abstract double java.sql.SQLInput.readDouble() throws java.sql.SQLException */
  private static final Method m17 = getMethod(java.sql.SQLInput.class, "readDouble", new Class[] {});
  public double readDouble() throws java.sql.SQLException
  {
    return ((Double)invoke(m17, new Object[] {})).doubleValue();
  }

  /** public abstract java.sql.Ref java.sql.SQLInput.readRef() throws java.sql.SQLException */
  private static final Method m18 = getMethod(java.sql.SQLInput.class, "readRef", new Class[] {});
  public java.sql.Ref readRef() throws java.sql.SQLException
  {
    return (java.sql.Ref)invoke(m18, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.SQLInput.readString() throws java.sql.SQLException */
  private static final Method m19 = getMethod(java.sql.SQLInput.class, "readString", new Class[] {});
  public java.lang.String readString() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m19, new Object[] {});
  }

  /** public abstract java.sql.Time java.sql.SQLInput.readTime() throws java.sql.SQLException */
  private static final Method m20 = getMethod(java.sql.SQLInput.class, "readTime", new Class[] {});
  public java.sql.Time readTime() throws java.sql.SQLException
  {
    return (java.sql.Time)invoke(m20, new Object[] {});
  }

  /** public abstract java.sql.Timestamp java.sql.SQLInput.readTimestamp() throws java.sql.SQLException */
  private static final Method m21 = getMethod(java.sql.SQLInput.class, "readTimestamp", new Class[] {});
  public java.sql.Timestamp readTimestamp() throws java.sql.SQLException
  {
    return (java.sql.Timestamp)invoke(m21, new Object[] {});
  }

  /** public abstract java.net.URL java.sql.SQLInput.readURL() throws java.sql.SQLException */
  private static final Method m22 = getMethod(java.sql.SQLInput.class, "readURL", new Class[] {});
  public java.net.URL readURL() throws java.sql.SQLException
  {
    return (java.net.URL)invoke(m22, new Object[] {});
  }
}
