/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.CallableStatement */
public class CallableStatementProxy extends JdbcProxy implements java.sql.CallableStatement
{
  /**
   * Constructs a new CallableStatementProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public CallableStatementProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.CallableStatement.class, proxyObject);
  }

  /** public abstract java.lang.Object java.sql.CallableStatement.getObject(int) throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.CallableStatement.class, "getObject", new Class[] {int.class});
  public java.lang.Object getObject(int p0) throws java.sql.SQLException
  {
    return (java.lang.Object)invoke(m0, new Object[] {new Integer(p0)});
  }

  /** public abstract java.lang.Object java.sql.CallableStatement.getObject(java.lang.String) throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.CallableStatement.class, "getObject", new Class[] {java.lang.String.class});
  public java.lang.Object getObject(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.lang.Object)invoke(m1, new Object[] {p0});
  }

  /** public abstract java.lang.Object java.sql.CallableStatement.getObject(int,java.util.Map) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.CallableStatement.class, "getObject", new Class[] {int.class, java.util.Map.class});
  public java.lang.Object getObject(int p0, java.util.Map p1) throws java.sql.SQLException
  {
    return (java.lang.Object)invoke(m2, new Object[] {new Integer(p0), p1});
  }

  /** public abstract java.lang.Object java.sql.CallableStatement.getObject(java.lang.String,java.util.Map) throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.CallableStatement.class, "getObject", new Class[] {java.lang.String.class, java.util.Map.class});
  public java.lang.Object getObject(java.lang.String p0, java.util.Map p1) throws java.sql.SQLException
  {
    return (java.lang.Object)invoke(m3, new Object[] {p0, p1});
  }

  /** public abstract boolean java.sql.CallableStatement.getBoolean(int) throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.CallableStatement.class, "getBoolean", new Class[] {int.class});
  public boolean getBoolean(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m4, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.CallableStatement.getBoolean(java.lang.String) throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.CallableStatement.class, "getBoolean", new Class[] {java.lang.String.class});
  public boolean getBoolean(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m5, new Object[] {p0})).booleanValue();
  }

  /** public abstract byte java.sql.CallableStatement.getByte(java.lang.String) throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.CallableStatement.class, "getByte", new Class[] {java.lang.String.class});
  public byte getByte(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Byte)invoke(m6, new Object[] {p0})).byteValue();
  }

  /** public abstract byte java.sql.CallableStatement.getByte(int) throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.CallableStatement.class, "getByte", new Class[] {int.class});
  public byte getByte(int p0) throws java.sql.SQLException
  {
    return ((Byte)invoke(m7, new Object[] {new Integer(p0)})).byteValue();
  }

  /** public abstract short java.sql.CallableStatement.getShort(int) throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.CallableStatement.class, "getShort", new Class[] {int.class});
  public short getShort(int p0) throws java.sql.SQLException
  {
    return ((Short)invoke(m8, new Object[] {new Integer(p0)})).shortValue();
  }

  /** public abstract short java.sql.CallableStatement.getShort(java.lang.String) throws java.sql.SQLException */
  private static final Method m9 = getMethod(java.sql.CallableStatement.class, "getShort", new Class[] {java.lang.String.class});
  public short getShort(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Short)invoke(m9, new Object[] {p0})).shortValue();
  }

  /** public abstract int java.sql.CallableStatement.getInt(int) throws java.sql.SQLException */
  private static final Method m10 = getMethod(java.sql.CallableStatement.class, "getInt", new Class[] {int.class});
  public int getInt(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m10, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract int java.sql.CallableStatement.getInt(java.lang.String) throws java.sql.SQLException */
  private static final Method m11 = getMethod(java.sql.CallableStatement.class, "getInt", new Class[] {java.lang.String.class});
  public int getInt(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m11, new Object[] {p0})).intValue();
  }

  /** public abstract long java.sql.CallableStatement.getLong(int) throws java.sql.SQLException */
  private static final Method m12 = getMethod(java.sql.CallableStatement.class, "getLong", new Class[] {int.class});
  public long getLong(int p0) throws java.sql.SQLException
  {
    return ((Long)invoke(m12, new Object[] {new Integer(p0)})).longValue();
  }

  /** public abstract long java.sql.CallableStatement.getLong(java.lang.String) throws java.sql.SQLException */
  private static final Method m13 = getMethod(java.sql.CallableStatement.class, "getLong", new Class[] {java.lang.String.class});
  public long getLong(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Long)invoke(m13, new Object[] {p0})).longValue();
  }

  /** public abstract float java.sql.CallableStatement.getFloat(java.lang.String) throws java.sql.SQLException */
  private static final Method m14 = getMethod(java.sql.CallableStatement.class, "getFloat", new Class[] {java.lang.String.class});
  public float getFloat(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Float)invoke(m14, new Object[] {p0})).floatValue();
  }

  /** public abstract float java.sql.CallableStatement.getFloat(int) throws java.sql.SQLException */
  private static final Method m15 = getMethod(java.sql.CallableStatement.class, "getFloat", new Class[] {int.class});
  public float getFloat(int p0) throws java.sql.SQLException
  {
    return ((Float)invoke(m15, new Object[] {new Integer(p0)})).floatValue();
  }

  /** public abstract double java.sql.CallableStatement.getDouble(int) throws java.sql.SQLException */
  private static final Method m16 = getMethod(java.sql.CallableStatement.class, "getDouble", new Class[] {int.class});
  public double getDouble(int p0) throws java.sql.SQLException
  {
    return ((Double)invoke(m16, new Object[] {new Integer(p0)})).doubleValue();
  }

  /** public abstract double java.sql.CallableStatement.getDouble(java.lang.String) throws java.sql.SQLException */
  private static final Method m17 = getMethod(java.sql.CallableStatement.class, "getDouble", new Class[] {java.lang.String.class});
  public double getDouble(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Double)invoke(m17, new Object[] {p0})).doubleValue();
  }

  /** public abstract byte[] java.sql.CallableStatement.getBytes(int) throws java.sql.SQLException */
  private static final Method m18 = getMethod(java.sql.CallableStatement.class, "getBytes", new Class[] {int.class});
  public byte[] getBytes(int p0) throws java.sql.SQLException
  {
    return (byte[])invoke(m18, new Object[] {new Integer(p0)});
  }

  /** public abstract byte[] java.sql.CallableStatement.getBytes(java.lang.String) throws java.sql.SQLException */
  private static final Method m19 = getMethod(java.sql.CallableStatement.class, "getBytes", new Class[] {java.lang.String.class});
  public byte[] getBytes(java.lang.String p0) throws java.sql.SQLException
  {
    return (byte[])invoke(m19, new Object[] {p0});
  }

  /** public abstract java.sql.Array java.sql.CallableStatement.getArray(int) throws java.sql.SQLException */
  private static final Method m20 = getMethod(java.sql.CallableStatement.class, "getArray", new Class[] {int.class});
  public java.sql.Array getArray(int p0) throws java.sql.SQLException
  {
    return (java.sql.Array)invoke(m20, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Array java.sql.CallableStatement.getArray(java.lang.String) throws java.sql.SQLException */
  private static final Method m21 = getMethod(java.sql.CallableStatement.class, "getArray", new Class[] {java.lang.String.class});
  public java.sql.Array getArray(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.Array)invoke(m21, new Object[] {p0});
  }

  /** public abstract java.net.URL java.sql.CallableStatement.getURL(java.lang.String) throws java.sql.SQLException */
  private static final Method m22 = getMethod(java.sql.CallableStatement.class, "getURL", new Class[] {java.lang.String.class});
  public java.net.URL getURL(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.net.URL)invoke(m22, new Object[] {p0});
  }

  /** public abstract java.net.URL java.sql.CallableStatement.getURL(int) throws java.sql.SQLException */
  private static final Method m23 = getMethod(java.sql.CallableStatement.class, "getURL", new Class[] {int.class});
  public java.net.URL getURL(int p0) throws java.sql.SQLException
  {
    return (java.net.URL)invoke(m23, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.CallableStatement.setBoolean(java.lang.String,boolean) throws java.sql.SQLException */
  private static final Method m24 = getMethod(java.sql.CallableStatement.class, "setBoolean", new Class[] {java.lang.String.class, boolean.class});
  public void setBoolean(java.lang.String p0, boolean p1) throws java.sql.SQLException
  {
    invoke(m24, new Object[] {p0, new Boolean(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setByte(java.lang.String,byte) throws java.sql.SQLException */
  private static final Method m25 = getMethod(java.sql.CallableStatement.class, "setByte", new Class[] {java.lang.String.class, byte.class});
  public void setByte(java.lang.String p0, byte p1) throws java.sql.SQLException
  {
    invoke(m25, new Object[] {p0, new Byte(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setDouble(java.lang.String,double) throws java.sql.SQLException */
  private static final Method m26 = getMethod(java.sql.CallableStatement.class, "setDouble", new Class[] {java.lang.String.class, double.class});
  public void setDouble(java.lang.String p0, double p1) throws java.sql.SQLException
  {
    invoke(m26, new Object[] {p0, new Double(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setFloat(java.lang.String,float) throws java.sql.SQLException */
  private static final Method m27 = getMethod(java.sql.CallableStatement.class, "setFloat", new Class[] {java.lang.String.class, float.class});
  public void setFloat(java.lang.String p0, float p1) throws java.sql.SQLException
  {
    invoke(m27, new Object[] {p0, new Float(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setInt(java.lang.String,int) throws java.sql.SQLException */
  private static final Method m28 = getMethod(java.sql.CallableStatement.class, "setInt", new Class[] {java.lang.String.class, int.class});
  public void setInt(java.lang.String p0, int p1) throws java.sql.SQLException
  {
    invoke(m28, new Object[] {p0, new Integer(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setLong(java.lang.String,long) throws java.sql.SQLException */
  private static final Method m29 = getMethod(java.sql.CallableStatement.class, "setLong", new Class[] {java.lang.String.class, long.class});
  public void setLong(java.lang.String p0, long p1) throws java.sql.SQLException
  {
    invoke(m29, new Object[] {p0, new Long(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setShort(java.lang.String,short) throws java.sql.SQLException */
  private static final Method m30 = getMethod(java.sql.CallableStatement.class, "setShort", new Class[] {java.lang.String.class, short.class});
  public void setShort(java.lang.String p0, short p1) throws java.sql.SQLException
  {
    invoke(m30, new Object[] {p0, new Short(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m31 = getMethod(java.sql.CallableStatement.class, "setTimestamp", new Class[] {java.lang.String.class, java.sql.Timestamp.class, java.util.Calendar.class});
  public void setTimestamp(java.lang.String p0, java.sql.Timestamp p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m31, new Object[] {p0, p1, p2});
  }

  /** public abstract void java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp) throws java.sql.SQLException */
  private static final Method m32 = getMethod(java.sql.CallableStatement.class, "setTimestamp", new Class[] {java.lang.String.class, java.sql.Timestamp.class});
  public void setTimestamp(java.lang.String p0, java.sql.Timestamp p1) throws java.sql.SQLException
  {
    invoke(m32, new Object[] {p0, p1});
  }

  /** public abstract java.sql.Ref java.sql.CallableStatement.getRef(int) throws java.sql.SQLException */
  private static final Method m33 = getMethod(java.sql.CallableStatement.class, "getRef", new Class[] {int.class});
  public java.sql.Ref getRef(int p0) throws java.sql.SQLException
  {
    return (java.sql.Ref)invoke(m33, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Ref java.sql.CallableStatement.getRef(java.lang.String) throws java.sql.SQLException */
  private static final Method m34 = getMethod(java.sql.CallableStatement.class, "getRef", new Class[] {java.lang.String.class});
  public java.sql.Ref getRef(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.Ref)invoke(m34, new Object[] {p0});
  }

  /** public abstract void java.sql.CallableStatement.setURL(java.lang.String,java.net.URL) throws java.sql.SQLException */
  private static final Method m35 = getMethod(java.sql.CallableStatement.class, "setURL", new Class[] {java.lang.String.class, java.net.URL.class});
  public void setURL(java.lang.String p0, java.net.URL p1) throws java.sql.SQLException
  {
    invoke(m35, new Object[] {p0, p1});
  }

  /** public abstract java.sql.Date java.sql.CallableStatement.getDate(int) throws java.sql.SQLException */
  private static final Method m36 = getMethod(java.sql.CallableStatement.class, "getDate", new Class[] {int.class});
  public java.sql.Date getDate(int p0) throws java.sql.SQLException
  {
    return (java.sql.Date)invoke(m36, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Date java.sql.CallableStatement.getDate(java.lang.String,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m37 = getMethod(java.sql.CallableStatement.class, "getDate", new Class[] {java.lang.String.class, java.util.Calendar.class});
  public java.sql.Date getDate(java.lang.String p0, java.util.Calendar p1) throws java.sql.SQLException
  {
    return (java.sql.Date)invoke(m37, new Object[] {p0, p1});
  }

  /** public abstract java.sql.Date java.sql.CallableStatement.getDate(int,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m38 = getMethod(java.sql.CallableStatement.class, "getDate", new Class[] {int.class, java.util.Calendar.class});
  public java.sql.Date getDate(int p0, java.util.Calendar p1) throws java.sql.SQLException
  {
    return (java.sql.Date)invoke(m38, new Object[] {new Integer(p0), p1});
  }

  /** public abstract java.sql.Date java.sql.CallableStatement.getDate(java.lang.String) throws java.sql.SQLException */
  private static final Method m39 = getMethod(java.sql.CallableStatement.class, "getDate", new Class[] {java.lang.String.class});
  public java.sql.Date getDate(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.Date)invoke(m39, new Object[] {p0});
  }

  /** public abstract void java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m40 = getMethod(java.sql.CallableStatement.class, "setBinaryStream", new Class[] {java.lang.String.class, java.io.InputStream.class, int.class});
  public void setBinaryStream(java.lang.String p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m40, new Object[] {p0, p1, new Integer(p2)});
  }

  /** public abstract void java.sql.CallableStatement.setBytes(java.lang.String,byte[]) throws java.sql.SQLException */
  private static final Method m41 = getMethod(java.sql.CallableStatement.class, "setBytes", new Class[] {java.lang.String.class, byte[].class});
  public void setBytes(java.lang.String p0, byte[] p1) throws java.sql.SQLException
  {
    invoke(m41, new Object[] {p0, p1});
  }

  /** public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(java.lang.String) throws java.sql.SQLException */
  private static final Method m42 = getMethod(java.sql.CallableStatement.class, "getBigDecimal", new Class[] {java.lang.String.class});
  public java.math.BigDecimal getBigDecimal(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.math.BigDecimal)invoke(m42, new Object[] {p0});
  }

  /** public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(int,int) throws java.sql.SQLException */
  private static final Method m43 = getMethod(java.sql.CallableStatement.class, "getBigDecimal", new Class[] {int.class, int.class});
  public java.math.BigDecimal getBigDecimal(int p0, int p1) throws java.sql.SQLException
  {
    return (java.math.BigDecimal)invoke(m43, new Object[] {new Integer(p0), new Integer(p1)});
  }

  /** public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(int) throws java.sql.SQLException */
  private static final Method m44 = getMethod(java.sql.CallableStatement.class, "getBigDecimal", new Class[] {int.class});
  public java.math.BigDecimal getBigDecimal(int p0) throws java.sql.SQLException
  {
    return (java.math.BigDecimal)invoke(m44, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Blob java.sql.CallableStatement.getBlob(int) throws java.sql.SQLException */
  private static final Method m45 = getMethod(java.sql.CallableStatement.class, "getBlob", new Class[] {int.class});
  public java.sql.Blob getBlob(int p0) throws java.sql.SQLException
  {
    return (java.sql.Blob)invoke(m45, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Blob java.sql.CallableStatement.getBlob(java.lang.String) throws java.sql.SQLException */
  private static final Method m46 = getMethod(java.sql.CallableStatement.class, "getBlob", new Class[] {java.lang.String.class});
  public java.sql.Blob getBlob(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.Blob)invoke(m46, new Object[] {p0});
  }

  /** public abstract java.sql.Clob java.sql.CallableStatement.getClob(int) throws java.sql.SQLException */
  private static final Method m47 = getMethod(java.sql.CallableStatement.class, "getClob", new Class[] {int.class});
  public java.sql.Clob getClob(int p0) throws java.sql.SQLException
  {
    return (java.sql.Clob)invoke(m47, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Clob java.sql.CallableStatement.getClob(java.lang.String) throws java.sql.SQLException */
  private static final Method m48 = getMethod(java.sql.CallableStatement.class, "getClob", new Class[] {java.lang.String.class});
  public java.sql.Clob getClob(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.Clob)invoke(m48, new Object[] {p0});
  }

  /** public abstract java.lang.String java.sql.CallableStatement.getString(int) throws java.sql.SQLException */
  private static final Method m49 = getMethod(java.sql.CallableStatement.class, "getString", new Class[] {int.class});
  public java.lang.String getString(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m49, new Object[] {new Integer(p0)});
  }

  /** public abstract java.lang.String java.sql.CallableStatement.getString(java.lang.String) throws java.sql.SQLException */
  private static final Method m50 = getMethod(java.sql.CallableStatement.class, "getString", new Class[] {java.lang.String.class});
  public java.lang.String getString(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m50, new Object[] {p0});
  }

  /** public abstract java.sql.Time java.sql.CallableStatement.getTime(int) throws java.sql.SQLException */
  private static final Method m51 = getMethod(java.sql.CallableStatement.class, "getTime", new Class[] {int.class});
  public java.sql.Time getTime(int p0) throws java.sql.SQLException
  {
    return (java.sql.Time)invoke(m51, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Time java.sql.CallableStatement.getTime(int,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m52 = getMethod(java.sql.CallableStatement.class, "getTime", new Class[] {int.class, java.util.Calendar.class});
  public java.sql.Time getTime(int p0, java.util.Calendar p1) throws java.sql.SQLException
  {
    return (java.sql.Time)invoke(m52, new Object[] {new Integer(p0), p1});
  }

  /** public abstract java.sql.Time java.sql.CallableStatement.getTime(java.lang.String,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m53 = getMethod(java.sql.CallableStatement.class, "getTime", new Class[] {java.lang.String.class, java.util.Calendar.class});
  public java.sql.Time getTime(java.lang.String p0, java.util.Calendar p1) throws java.sql.SQLException
  {
    return (java.sql.Time)invoke(m53, new Object[] {p0, p1});
  }

  /** public abstract java.sql.Time java.sql.CallableStatement.getTime(java.lang.String) throws java.sql.SQLException */
  private static final Method m54 = getMethod(java.sql.CallableStatement.class, "getTime", new Class[] {java.lang.String.class});
  public java.sql.Time getTime(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.Time)invoke(m54, new Object[] {p0});
  }

  /** public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(int) throws java.sql.SQLException */
  private static final Method m55 = getMethod(java.sql.CallableStatement.class, "getTimestamp", new Class[] {int.class});
  public java.sql.Timestamp getTimestamp(int p0) throws java.sql.SQLException
  {
    return (java.sql.Timestamp)invoke(m55, new Object[] {new Integer(p0)});
  }

  /** public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(java.lang.String,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m56 = getMethod(java.sql.CallableStatement.class, "getTimestamp", new Class[] {java.lang.String.class, java.util.Calendar.class});
  public java.sql.Timestamp getTimestamp(java.lang.String p0, java.util.Calendar p1) throws java.sql.SQLException
  {
    return (java.sql.Timestamp)invoke(m56, new Object[] {p0, p1});
  }

  /** public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(int,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m57 = getMethod(java.sql.CallableStatement.class, "getTimestamp", new Class[] {int.class, java.util.Calendar.class});
  public java.sql.Timestamp getTimestamp(int p0, java.util.Calendar p1) throws java.sql.SQLException
  {
    return (java.sql.Timestamp)invoke(m57, new Object[] {new Integer(p0), p1});
  }

  /** public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(java.lang.String) throws java.sql.SQLException */
  private static final Method m58 = getMethod(java.sql.CallableStatement.class, "getTimestamp", new Class[] {java.lang.String.class});
  public java.sql.Timestamp getTimestamp(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.Timestamp)invoke(m58, new Object[] {p0});
  }

  /** public abstract void java.sql.CallableStatement.registerOutParameter(int,int,int) throws java.sql.SQLException */
  private static final Method m59 = getMethod(java.sql.CallableStatement.class, "registerOutParameter", new Class[] {int.class, int.class, int.class});
  public void registerOutParameter(int p0, int p1, int p2) throws java.sql.SQLException
  {
    invoke(m59, new Object[] {new Integer(p0), new Integer(p1), new Integer(p2)});
  }

  /** public abstract void java.sql.CallableStatement.registerOutParameter(int,int) throws java.sql.SQLException */
  private static final Method m60 = getMethod(java.sql.CallableStatement.class, "registerOutParameter", new Class[] {int.class, int.class});
  public void registerOutParameter(int p0, int p1) throws java.sql.SQLException
  {
    invoke(m60, new Object[] {new Integer(p0), new Integer(p1)});
  }

  /** public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int,java.lang.String) throws java.sql.SQLException */
  private static final Method m61 = getMethod(java.sql.CallableStatement.class, "registerOutParameter", new Class[] {java.lang.String.class, int.class, java.lang.String.class});
  public void registerOutParameter(java.lang.String p0, int p1, java.lang.String p2) throws java.sql.SQLException
  {
    invoke(m61, new Object[] {p0, new Integer(p1), p2});
  }

  /** public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int) throws java.sql.SQLException */
  private static final Method m62 = getMethod(java.sql.CallableStatement.class, "registerOutParameter", new Class[] {java.lang.String.class, int.class});
  public void registerOutParameter(java.lang.String p0, int p1) throws java.sql.SQLException
  {
    invoke(m62, new Object[] {p0, new Integer(p1)});
  }

  /** public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int,int) throws java.sql.SQLException */
  private static final Method m63 = getMethod(java.sql.CallableStatement.class, "registerOutParameter", new Class[] {java.lang.String.class, int.class, int.class});
  public void registerOutParameter(java.lang.String p0, int p1, int p2) throws java.sql.SQLException
  {
    invoke(m63, new Object[] {p0, new Integer(p1), new Integer(p2)});
  }

  /** public abstract void java.sql.CallableStatement.registerOutParameter(int,int,java.lang.String) throws java.sql.SQLException */
  private static final Method m64 = getMethod(java.sql.CallableStatement.class, "registerOutParameter", new Class[] {int.class, int.class, java.lang.String.class});
  public void registerOutParameter(int p0, int p1, java.lang.String p2) throws java.sql.SQLException
  {
    invoke(m64, new Object[] {new Integer(p0), new Integer(p1), p2});
  }

  /** public abstract void java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m65 = getMethod(java.sql.CallableStatement.class, "setAsciiStream", new Class[] {java.lang.String.class, java.io.InputStream.class, int.class});
  public void setAsciiStream(java.lang.String p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m65, new Object[] {p0, p1, new Integer(p2)});
  }

  /** public abstract void java.sql.CallableStatement.setBigDecimal(java.lang.String,java.math.BigDecimal) throws java.sql.SQLException */
  private static final Method m66 = getMethod(java.sql.CallableStatement.class, "setBigDecimal", new Class[] {java.lang.String.class, java.math.BigDecimal.class});
  public void setBigDecimal(java.lang.String p0, java.math.BigDecimal p1) throws java.sql.SQLException
  {
    invoke(m66, new Object[] {p0, p1});
  }

  /** public abstract void java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,int) throws java.sql.SQLException */
  private static final Method m67 = getMethod(java.sql.CallableStatement.class, "setCharacterStream", new Class[] {java.lang.String.class, java.io.Reader.class, int.class});
  public void setCharacterStream(java.lang.String p0, java.io.Reader p1, int p2) throws java.sql.SQLException
  {
    invoke(m67, new Object[] {p0, p1, new Integer(p2)});
  }

  /** public abstract void java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date) throws java.sql.SQLException */
  private static final Method m68 = getMethod(java.sql.CallableStatement.class, "setDate", new Class[] {java.lang.String.class, java.sql.Date.class});
  public void setDate(java.lang.String p0, java.sql.Date p1) throws java.sql.SQLException
  {
    invoke(m68, new Object[] {p0, p1});
  }

  /** public abstract void java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m69 = getMethod(java.sql.CallableStatement.class, "setDate", new Class[] {java.lang.String.class, java.sql.Date.class, java.util.Calendar.class});
  public void setDate(java.lang.String p0, java.sql.Date p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m69, new Object[] {p0, p1, p2});
  }

  /** public abstract void java.sql.CallableStatement.setNull(java.lang.String,int,java.lang.String) throws java.sql.SQLException */
  private static final Method m70 = getMethod(java.sql.CallableStatement.class, "setNull", new Class[] {java.lang.String.class, int.class, java.lang.String.class});
  public void setNull(java.lang.String p0, int p1, java.lang.String p2) throws java.sql.SQLException
  {
    invoke(m70, new Object[] {p0, new Integer(p1), p2});
  }

  /** public abstract void java.sql.CallableStatement.setNull(java.lang.String,int) throws java.sql.SQLException */
  private static final Method m71 = getMethod(java.sql.CallableStatement.class, "setNull", new Class[] {java.lang.String.class, int.class});
  public void setNull(java.lang.String p0, int p1) throws java.sql.SQLException
  {
    invoke(m71, new Object[] {p0, new Integer(p1)});
  }

  /** public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int) throws java.sql.SQLException */
  private static final Method m72 = getMethod(java.sql.CallableStatement.class, "setObject", new Class[] {java.lang.String.class, java.lang.Object.class, int.class});
  public void setObject(java.lang.String p0, java.lang.Object p1, int p2) throws java.sql.SQLException
  {
    invoke(m72, new Object[] {p0, p1, new Integer(p2)});
  }

  /** public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int,int) throws java.sql.SQLException */
  private static final Method m73 = getMethod(java.sql.CallableStatement.class, "setObject", new Class[] {java.lang.String.class, java.lang.Object.class, int.class, int.class});
  public void setObject(java.lang.String p0, java.lang.Object p1, int p2, int p3) throws java.sql.SQLException
  {
    invoke(m73, new Object[] {p0, p1, new Integer(p2), new Integer(p3)});
  }

  /** public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object) throws java.sql.SQLException */
  private static final Method m74 = getMethod(java.sql.CallableStatement.class, "setObject", new Class[] {java.lang.String.class, java.lang.Object.class});
  public void setObject(java.lang.String p0, java.lang.Object p1) throws java.sql.SQLException
  {
    invoke(m74, new Object[] {p0, p1});
  }

  /** public abstract void java.sql.CallableStatement.setString(java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m75 = getMethod(java.sql.CallableStatement.class, "setString", new Class[] {java.lang.String.class, java.lang.String.class});
  public void setString(java.lang.String p0, java.lang.String p1) throws java.sql.SQLException
  {
    invoke(m75, new Object[] {p0, p1});
  }

  /** public abstract void java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m76 = getMethod(java.sql.CallableStatement.class, "setTime", new Class[] {java.lang.String.class, java.sql.Time.class, java.util.Calendar.class});
  public void setTime(java.lang.String p0, java.sql.Time p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m76, new Object[] {p0, p1, p2});
  }

  /** public abstract void java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time) throws java.sql.SQLException */
  private static final Method m77 = getMethod(java.sql.CallableStatement.class, "setTime", new Class[] {java.lang.String.class, java.sql.Time.class});
  public void setTime(java.lang.String p0, java.sql.Time p1) throws java.sql.SQLException
  {
    invoke(m77, new Object[] {p0, p1});
  }

  /** public abstract boolean java.sql.CallableStatement.wasNull() throws java.sql.SQLException */
  private static final Method m78 = getMethod(java.sql.CallableStatement.class, "wasNull", new Class[] {});
  public boolean wasNull() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m78, new Object[] {})).booleanValue();
  }

  /** public abstract void java.sql.PreparedStatement.setBoolean(int,boolean) throws java.sql.SQLException */
  private static final Method m79 = getMethod(java.sql.CallableStatement.class, "setBoolean", new Class[] {int.class, boolean.class});
  public void setBoolean(int p0, boolean p1) throws java.sql.SQLException
  {
    invoke(m79, new Object[] {new Integer(p0), new Boolean(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setByte(int,byte) throws java.sql.SQLException */
  private static final Method m80 = getMethod(java.sql.CallableStatement.class, "setByte", new Class[] {int.class, byte.class});
  public void setByte(int p0, byte p1) throws java.sql.SQLException
  {
    invoke(m80, new Object[] {new Integer(p0), new Byte(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setDouble(int,double) throws java.sql.SQLException */
  private static final Method m81 = getMethod(java.sql.CallableStatement.class, "setDouble", new Class[] {int.class, double.class});
  public void setDouble(int p0, double p1) throws java.sql.SQLException
  {
    invoke(m81, new Object[] {new Integer(p0), new Double(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setFloat(int,float) throws java.sql.SQLException */
  private static final Method m82 = getMethod(java.sql.CallableStatement.class, "setFloat", new Class[] {int.class, float.class});
  public void setFloat(int p0, float p1) throws java.sql.SQLException
  {
    invoke(m82, new Object[] {new Integer(p0), new Float(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setInt(int,int) throws java.sql.SQLException */
  private static final Method m83 = getMethod(java.sql.CallableStatement.class, "setInt", new Class[] {int.class, int.class});
  public void setInt(int p0, int p1) throws java.sql.SQLException
  {
    invoke(m83, new Object[] {new Integer(p0), new Integer(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setLong(int,long) throws java.sql.SQLException */
  private static final Method m84 = getMethod(java.sql.CallableStatement.class, "setLong", new Class[] {int.class, long.class});
  public void setLong(int p0, long p1) throws java.sql.SQLException
  {
    invoke(m84, new Object[] {new Integer(p0), new Long(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setShort(int,short) throws java.sql.SQLException */
  private static final Method m85 = getMethod(java.sql.CallableStatement.class, "setShort", new Class[] {int.class, short.class});
  public void setShort(int p0, short p1) throws java.sql.SQLException
  {
    invoke(m85, new Object[] {new Integer(p0), new Short(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp) throws java.sql.SQLException */
  private static final Method m86 = getMethod(java.sql.CallableStatement.class, "setTimestamp", new Class[] {int.class, java.sql.Timestamp.class});
  public void setTimestamp(int p0, java.sql.Timestamp p1) throws java.sql.SQLException
  {
    invoke(m86, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m87 = getMethod(java.sql.CallableStatement.class, "setTimestamp", new Class[] {int.class, java.sql.Timestamp.class, java.util.Calendar.class});
  public void setTimestamp(int p0, java.sql.Timestamp p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m87, new Object[] {new Integer(p0), p1, p2});
  }

  /** public abstract void java.sql.PreparedStatement.setURL(int,java.net.URL) throws java.sql.SQLException */
  private static final Method m88 = getMethod(java.sql.CallableStatement.class, "setURL", new Class[] {int.class, java.net.URL.class});
  public void setURL(int p0, java.net.URL p1) throws java.sql.SQLException
  {
    invoke(m88, new Object[] {new Integer(p0), p1});
  }

  /** public abstract boolean java.sql.PreparedStatement.execute() throws java.sql.SQLException */
  private static final Method m89 = getMethod(java.sql.CallableStatement.class, "execute", new Class[] {});
  public boolean execute() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m89, new Object[] {})).booleanValue();
  }

  /** public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m90 = getMethod(java.sql.CallableStatement.class, "setBinaryStream", new Class[] {int.class, java.io.InputStream.class, int.class});
  public void setBinaryStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m90, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setBytes(int,byte[]) throws java.sql.SQLException */
  private static final Method m91 = getMethod(java.sql.CallableStatement.class, "setBytes", new Class[] {int.class, byte[].class});
  public void setBytes(int p0, byte[] p1) throws java.sql.SQLException
  {
    invoke(m91, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m92 = getMethod(java.sql.CallableStatement.class, "setAsciiStream", new Class[] {int.class, java.io.InputStream.class, int.class});
  public void setAsciiStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m92, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setBigDecimal(int,java.math.BigDecimal) throws java.sql.SQLException */
  private static final Method m93 = getMethod(java.sql.CallableStatement.class, "setBigDecimal", new Class[] {int.class, java.math.BigDecimal.class});
  public void setBigDecimal(int p0, java.math.BigDecimal p1) throws java.sql.SQLException
  {
    invoke(m93, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,int) throws java.sql.SQLException */
  private static final Method m94 = getMethod(java.sql.CallableStatement.class, "setCharacterStream", new Class[] {int.class, java.io.Reader.class, int.class});
  public void setCharacterStream(int p0, java.io.Reader p1, int p2) throws java.sql.SQLException
  {
    invoke(m94, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m95 = getMethod(java.sql.CallableStatement.class, "setDate", new Class[] {int.class, java.sql.Date.class, java.util.Calendar.class});
  public void setDate(int p0, java.sql.Date p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m95, new Object[] {new Integer(p0), p1, p2});
  }

  /** public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date) throws java.sql.SQLException */
  private static final Method m96 = getMethod(java.sql.CallableStatement.class, "setDate", new Class[] {int.class, java.sql.Date.class});
  public void setDate(int p0, java.sql.Date p1) throws java.sql.SQLException
  {
    invoke(m96, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setNull(int,int,java.lang.String) throws java.sql.SQLException */
  private static final Method m97 = getMethod(java.sql.CallableStatement.class, "setNull", new Class[] {int.class, int.class, java.lang.String.class});
  public void setNull(int p0, int p1, java.lang.String p2) throws java.sql.SQLException
  {
    invoke(m97, new Object[] {new Integer(p0), new Integer(p1), p2});
  }

  /** public abstract void java.sql.PreparedStatement.setNull(int,int) throws java.sql.SQLException */
  private static final Method m98 = getMethod(java.sql.CallableStatement.class, "setNull", new Class[] {int.class, int.class});
  public void setNull(int p0, int p1) throws java.sql.SQLException
  {
    invoke(m98, new Object[] {new Integer(p0), new Integer(p1)});
  }

  /** public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int,int) throws java.sql.SQLException */
  private static final Method m99 = getMethod(java.sql.CallableStatement.class, "setObject", new Class[] {int.class, java.lang.Object.class, int.class, int.class});
  public void setObject(int p0, java.lang.Object p1, int p2, int p3) throws java.sql.SQLException
  {
    invoke(m99, new Object[] {new Integer(p0), p1, new Integer(p2), new Integer(p3)});
  }

  /** public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object) throws java.sql.SQLException */
  private static final Method m100 = getMethod(java.sql.CallableStatement.class, "setObject", new Class[] {int.class, java.lang.Object.class});
  public void setObject(int p0, java.lang.Object p1) throws java.sql.SQLException
  {
    invoke(m100, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int) throws java.sql.SQLException */
  private static final Method m101 = getMethod(java.sql.CallableStatement.class, "setObject", new Class[] {int.class, java.lang.Object.class, int.class});
  public void setObject(int p0, java.lang.Object p1, int p2) throws java.sql.SQLException
  {
    invoke(m101, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.PreparedStatement.setString(int,java.lang.String) throws java.sql.SQLException */
  private static final Method m102 = getMethod(java.sql.CallableStatement.class, "setString", new Class[] {int.class, java.lang.String.class});
  public void setString(int p0, java.lang.String p1) throws java.sql.SQLException
  {
    invoke(m102, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time,java.util.Calendar) throws java.sql.SQLException */
  private static final Method m103 = getMethod(java.sql.CallableStatement.class, "setTime", new Class[] {int.class, java.sql.Time.class, java.util.Calendar.class});
  public void setTime(int p0, java.sql.Time p1, java.util.Calendar p2) throws java.sql.SQLException
  {
    invoke(m103, new Object[] {new Integer(p0), p1, p2});
  }

  /** public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time) throws java.sql.SQLException */
  private static final Method m104 = getMethod(java.sql.CallableStatement.class, "setTime", new Class[] {int.class, java.sql.Time.class});
  public void setTime(int p0, java.sql.Time p1) throws java.sql.SQLException
  {
    invoke(m104, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.addBatch() throws java.sql.SQLException */
  private static final Method m105 = getMethod(java.sql.CallableStatement.class, "addBatch", new Class[] {});
  public void addBatch() throws java.sql.SQLException
  {
    invoke(m105, new Object[] {});
  }

  /** public abstract void java.sql.PreparedStatement.clearParameters() throws java.sql.SQLException */
  private static final Method m106 = getMethod(java.sql.CallableStatement.class, "clearParameters", new Class[] {});
  public void clearParameters() throws java.sql.SQLException
  {
    invoke(m106, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.PreparedStatement.executeQuery() throws java.sql.SQLException */
  private static final Method m107 = getMethod(java.sql.CallableStatement.class, "executeQuery", new Class[] {});
  public java.sql.ResultSet executeQuery() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m107, new Object[] {});
  }

  /** public abstract int java.sql.PreparedStatement.executeUpdate() throws java.sql.SQLException */
  private static final Method m108 = getMethod(java.sql.CallableStatement.class, "executeUpdate", new Class[] {});
  public int executeUpdate() throws java.sql.SQLException
  {
    return ((Integer)invoke(m108, new Object[] {})).intValue();
  }

  /** public abstract java.sql.ResultSetMetaData java.sql.PreparedStatement.getMetaData() throws java.sql.SQLException */
  private static final Method m109 = getMethod(java.sql.CallableStatement.class, "getMetaData", new Class[] {});
  public java.sql.ResultSetMetaData getMetaData() throws java.sql.SQLException
  {
    return (java.sql.ResultSetMetaData)invoke(m109, new Object[] {});
  }

  /** public abstract java.sql.ParameterMetaData java.sql.PreparedStatement.getParameterMetaData() throws java.sql.SQLException */
  private static final Method m110 = getMethod(java.sql.CallableStatement.class, "getParameterMetaData", new Class[] {});
  public java.sql.ParameterMetaData getParameterMetaData() throws java.sql.SQLException
  {
    return (java.sql.ParameterMetaData)invoke(m110, new Object[] {});
  }

  /** public abstract void java.sql.PreparedStatement.setArray(int,java.sql.Array) throws java.sql.SQLException */
  private static final Method m111 = getMethod(java.sql.CallableStatement.class, "setArray", new Class[] {int.class, java.sql.Array.class});
  public void setArray(int p0, java.sql.Array p1) throws java.sql.SQLException
  {
    invoke(m111, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setBlob(int,java.sql.Blob) throws java.sql.SQLException */
  private static final Method m112 = getMethod(java.sql.CallableStatement.class, "setBlob", new Class[] {int.class, java.sql.Blob.class});
  public void setBlob(int p0, java.sql.Blob p1) throws java.sql.SQLException
  {
    invoke(m112, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setClob(int,java.sql.Clob) throws java.sql.SQLException */
  private static final Method m113 = getMethod(java.sql.CallableStatement.class, "setClob", new Class[] {int.class, java.sql.Clob.class});
  public void setClob(int p0, java.sql.Clob p1) throws java.sql.SQLException
  {
    invoke(m113, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setRef(int,java.sql.Ref) throws java.sql.SQLException */
  private static final Method m114 = getMethod(java.sql.CallableStatement.class, "setRef", new Class[] {int.class, java.sql.Ref.class});
  public void setRef(int p0, java.sql.Ref p1) throws java.sql.SQLException
  {
    invoke(m114, new Object[] {new Integer(p0), p1});
  }

  /** public abstract void java.sql.PreparedStatement.setUnicodeStream(int,java.io.InputStream,int) throws java.sql.SQLException */
  private static final Method m115 = getMethod(java.sql.CallableStatement.class, "setUnicodeStream", new Class[] {int.class, java.io.InputStream.class, int.class});
  public void setUnicodeStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException
  {
    invoke(m115, new Object[] {new Integer(p0), p1, new Integer(p2)});
  }

  /** public abstract void java.sql.Statement.close() throws java.sql.SQLException */
  private static final Method m116 = getMethod(java.sql.CallableStatement.class, "close", new Class[] {});
  public void close() throws java.sql.SQLException
  {
    invoke(m116, new Object[] {});
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String,java.lang.String[]) throws java.sql.SQLException */
  private static final Method m117 = getMethod(java.sql.CallableStatement.class, "execute", new Class[] {java.lang.String.class, java.lang.String[].class});
  public boolean execute(java.lang.String p0, java.lang.String[] p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m117, new Object[] {p0, p1})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String,int) throws java.sql.SQLException */
  private static final Method m118 = getMethod(java.sql.CallableStatement.class, "execute", new Class[] {java.lang.String.class, int.class});
  public boolean execute(java.lang.String p0, int p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m118, new Object[] {p0, new Integer(p1)})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String) throws java.sql.SQLException */
  private static final Method m119 = getMethod(java.sql.CallableStatement.class, "execute", new Class[] {java.lang.String.class});
  public boolean execute(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m119, new Object[] {p0})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.execute(java.lang.String,int[]) throws java.sql.SQLException */
  private static final Method m120 = getMethod(java.sql.CallableStatement.class, "execute", new Class[] {java.lang.String.class, int[].class});
  public boolean execute(java.lang.String p0, int[] p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m120, new Object[] {p0, p1})).booleanValue();
  }

  /** public abstract java.sql.ResultSet java.sql.Statement.getResultSet() throws java.sql.SQLException */
  private static final Method m121 = getMethod(java.sql.CallableStatement.class, "getResultSet", new Class[] {});
  public java.sql.ResultSet getResultSet() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m121, new Object[] {});
  }

  /** public abstract void java.sql.Statement.addBatch(java.lang.String) throws java.sql.SQLException */
  private static final Method m122 = getMethod(java.sql.CallableStatement.class, "addBatch", new Class[] {java.lang.String.class});
  public void addBatch(java.lang.String p0) throws java.sql.SQLException
  {
    invoke(m122, new Object[] {p0});
  }

  /** public abstract java.sql.ResultSet java.sql.Statement.executeQuery(java.lang.String) throws java.sql.SQLException */
  private static final Method m123 = getMethod(java.sql.CallableStatement.class, "executeQuery", new Class[] {java.lang.String.class});
  public java.sql.ResultSet executeQuery(java.lang.String p0) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m123, new Object[] {p0});
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String,java.lang.String[]) throws java.sql.SQLException */
  private static final Method m124 = getMethod(java.sql.CallableStatement.class, "executeUpdate", new Class[] {java.lang.String.class, java.lang.String[].class});
  public int executeUpdate(java.lang.String p0, java.lang.String[] p1) throws java.sql.SQLException
  {
    return ((Integer)invoke(m124, new Object[] {p0, p1})).intValue();
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String) throws java.sql.SQLException */
  private static final Method m125 = getMethod(java.sql.CallableStatement.class, "executeUpdate", new Class[] {java.lang.String.class});
  public int executeUpdate(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m125, new Object[] {p0})).intValue();
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String,int) throws java.sql.SQLException */
  private static final Method m126 = getMethod(java.sql.CallableStatement.class, "executeUpdate", new Class[] {java.lang.String.class, int.class});
  public int executeUpdate(java.lang.String p0, int p1) throws java.sql.SQLException
  {
    return ((Integer)invoke(m126, new Object[] {p0, new Integer(p1)})).intValue();
  }

  /** public abstract int java.sql.Statement.executeUpdate(java.lang.String,int[]) throws java.sql.SQLException */
  private static final Method m127 = getMethod(java.sql.CallableStatement.class, "executeUpdate", new Class[] {java.lang.String.class, int[].class});
  public int executeUpdate(java.lang.String p0, int[] p1) throws java.sql.SQLException
  {
    return ((Integer)invoke(m127, new Object[] {p0, p1})).intValue();
  }

  /** public abstract void java.sql.Statement.cancel() throws java.sql.SQLException */
  private static final Method m128 = getMethod(java.sql.CallableStatement.class, "cancel", new Class[] {});
  public void cancel() throws java.sql.SQLException
  {
    invoke(m128, new Object[] {});
  }

  /** public abstract void java.sql.Statement.clearBatch() throws java.sql.SQLException */
  private static final Method m129 = getMethod(java.sql.CallableStatement.class, "clearBatch", new Class[] {});
  public void clearBatch() throws java.sql.SQLException
  {
    invoke(m129, new Object[] {});
  }

  /** public abstract void java.sql.Statement.clearWarnings() throws java.sql.SQLException */
  private static final Method m130 = getMethod(java.sql.CallableStatement.class, "clearWarnings", new Class[] {});
  public void clearWarnings() throws java.sql.SQLException
  {
    invoke(m130, new Object[] {});
  }

  /** public abstract int[] java.sql.Statement.executeBatch() throws java.sql.SQLException */
  private static final Method m131 = getMethod(java.sql.CallableStatement.class, "executeBatch", new Class[] {});
  public int[] executeBatch() throws java.sql.SQLException
  {
    return (int[])invoke(m131, new Object[] {});
  }

  /** public abstract java.sql.Connection java.sql.Statement.getConnection() throws java.sql.SQLException */
  private static final Method m132 = getMethod(java.sql.CallableStatement.class, "getConnection", new Class[] {});
  public java.sql.Connection getConnection() throws java.sql.SQLException
  {
    return (java.sql.Connection)invoke(m132, new Object[] {});
  }

  /** public abstract int java.sql.Statement.getFetchDirection() throws java.sql.SQLException */
  private static final Method m133 = getMethod(java.sql.CallableStatement.class, "getFetchDirection", new Class[] {});
  public int getFetchDirection() throws java.sql.SQLException
  {
    return ((Integer)invoke(m133, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getFetchSize() throws java.sql.SQLException */
  private static final Method m134 = getMethod(java.sql.CallableStatement.class, "getFetchSize", new Class[] {});
  public int getFetchSize() throws java.sql.SQLException
  {
    return ((Integer)invoke(m134, new Object[] {})).intValue();
  }

  /** public abstract java.sql.ResultSet java.sql.Statement.getGeneratedKeys() throws java.sql.SQLException */
  private static final Method m135 = getMethod(java.sql.CallableStatement.class, "getGeneratedKeys", new Class[] {});
  public java.sql.ResultSet getGeneratedKeys() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m135, new Object[] {});
  }

  /** public abstract int java.sql.Statement.getMaxFieldSize() throws java.sql.SQLException */
  private static final Method m136 = getMethod(java.sql.CallableStatement.class, "getMaxFieldSize", new Class[] {});
  public int getMaxFieldSize() throws java.sql.SQLException
  {
    return ((Integer)invoke(m136, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getMaxRows() throws java.sql.SQLException */
  private static final Method m137 = getMethod(java.sql.CallableStatement.class, "getMaxRows", new Class[] {});
  public int getMaxRows() throws java.sql.SQLException
  {
    return ((Integer)invoke(m137, new Object[] {})).intValue();
  }

  /** public abstract boolean java.sql.Statement.getMoreResults(int) throws java.sql.SQLException */
  private static final Method m138 = getMethod(java.sql.CallableStatement.class, "getMoreResults", new Class[] {int.class});
  public boolean getMoreResults(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m138, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.Statement.getMoreResults() throws java.sql.SQLException */
  private static final Method m139 = getMethod(java.sql.CallableStatement.class, "getMoreResults", new Class[] {});
  public boolean getMoreResults() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m139, new Object[] {})).booleanValue();
  }

  /** public abstract int java.sql.Statement.getQueryTimeout() throws java.sql.SQLException */
  private static final Method m140 = getMethod(java.sql.CallableStatement.class, "getQueryTimeout", new Class[] {});
  public int getQueryTimeout() throws java.sql.SQLException
  {
    return ((Integer)invoke(m140, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getResultSetConcurrency() throws java.sql.SQLException */
  private static final Method m141 = getMethod(java.sql.CallableStatement.class, "getResultSetConcurrency", new Class[] {});
  public int getResultSetConcurrency() throws java.sql.SQLException
  {
    return ((Integer)invoke(m141, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getResultSetHoldability() throws java.sql.SQLException */
  private static final Method m142 = getMethod(java.sql.CallableStatement.class, "getResultSetHoldability", new Class[] {});
  public int getResultSetHoldability() throws java.sql.SQLException
  {
    return ((Integer)invoke(m142, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getResultSetType() throws java.sql.SQLException */
  private static final Method m143 = getMethod(java.sql.CallableStatement.class, "getResultSetType", new Class[] {});
  public int getResultSetType() throws java.sql.SQLException
  {
    return ((Integer)invoke(m143, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Statement.getUpdateCount() throws java.sql.SQLException */
  private static final Method m144 = getMethod(java.sql.CallableStatement.class, "getUpdateCount", new Class[] {});
  public int getUpdateCount() throws java.sql.SQLException
  {
    return ((Integer)invoke(m144, new Object[] {})).intValue();
  }

  /** public abstract java.sql.SQLWarning java.sql.Statement.getWarnings() throws java.sql.SQLException */
  private static final Method m145 = getMethod(java.sql.CallableStatement.class, "getWarnings", new Class[] {});
  public java.sql.SQLWarning getWarnings() throws java.sql.SQLException
  {
    return (java.sql.SQLWarning)invoke(m145, new Object[] {});
  }

  /** public abstract void java.sql.Statement.setCursorName(java.lang.String) throws java.sql.SQLException */
  private static final Method m146 = getMethod(java.sql.CallableStatement.class, "setCursorName", new Class[] {java.lang.String.class});
  public void setCursorName(java.lang.String p0) throws java.sql.SQLException
  {
    invoke(m146, new Object[] {p0});
  }

  /** public abstract void java.sql.Statement.setEscapeProcessing(boolean) throws java.sql.SQLException */
  private static final Method m147 = getMethod(java.sql.CallableStatement.class, "setEscapeProcessing", new Class[] {boolean.class});
  public void setEscapeProcessing(boolean p0) throws java.sql.SQLException
  {
    invoke(m147, new Object[] {new Boolean(p0)});
  }

  /** public abstract void java.sql.Statement.setFetchDirection(int) throws java.sql.SQLException */
  private static final Method m148 = getMethod(java.sql.CallableStatement.class, "setFetchDirection", new Class[] {int.class});
  public void setFetchDirection(int p0) throws java.sql.SQLException
  {
    invoke(m148, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setFetchSize(int) throws java.sql.SQLException */
  private static final Method m149 = getMethod(java.sql.CallableStatement.class, "setFetchSize", new Class[] {int.class});
  public void setFetchSize(int p0) throws java.sql.SQLException
  {
    invoke(m149, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setMaxFieldSize(int) throws java.sql.SQLException */
  private static final Method m150 = getMethod(java.sql.CallableStatement.class, "setMaxFieldSize", new Class[] {int.class});
  public void setMaxFieldSize(int p0) throws java.sql.SQLException
  {
    invoke(m150, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setMaxRows(int) throws java.sql.SQLException */
  private static final Method m151 = getMethod(java.sql.CallableStatement.class, "setMaxRows", new Class[] {int.class});
  public void setMaxRows(int p0) throws java.sql.SQLException
  {
    invoke(m151, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.Statement.setQueryTimeout(int) throws java.sql.SQLException */
  private static final Method m152 = getMethod(java.sql.CallableStatement.class, "setQueryTimeout", new Class[] {int.class});
  public void setQueryTimeout(int p0) throws java.sql.SQLException
  {
    invoke(m152, new Object[] {new Integer(p0)});
  }
}
