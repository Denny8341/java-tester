/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc;

import java.lang.reflect.Method;
import java.util.Map;

import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.Array */
@SuppressWarnings("unchecked")
public class ArrayProxy extends JdbcProxy implements java.sql.Array {
	/**
	 * Constructs a new ArrayProxy object.
	 * 
	 * @param handler
	 *            the proxy handler
	 * @param proxyObject
	 *            the proxy data
	 */
	public ArrayProxy(Handler handler, Object proxyObject) {
		super(handler, java.sql.Array.class, proxyObject);
	}

	/**
	 * public abstract java.lang.Object java.sql.Array.getArray() throws
	 * java.sql.SQLException
	 */
	private static final Method m0 = getMethod(java.sql.Array.class, "getArray", new Class[] {});

	public java.lang.Object getArray() throws java.sql.SQLException {
		return (java.lang.Object) invoke(m0, new Object[] {});
	}

	/**
	 * public abstract java.lang.Object java.sql.Array.getArray(long,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m1 = getMethod(java.sql.Array.class, "getArray", new Class[] { long.class, int.class });

	public java.lang.Object getArray(long p0, int p1) throws java.sql.SQLException {
		return (java.lang.Object) invoke(m1, new Object[] { new Long(p0), new Integer(p1) });
	}

	/**
	 * public abstract java.lang.Object
	 * java.sql.Array.getArray(long,int,java.util.Map) throws
	 * java.sql.SQLException
	 */
	private static final Method m2 = getMethod(java.sql.Array.class, "getArray", new Class[] { long.class, int.class,
			Map.class });

	
	public Object getArray(long p0, int p1, Map p2) throws java.sql.SQLException {
		return (Object) invoke(m2, new Object[] { new Long(p0), new Integer(p1), p2 });
	}

	/**
	 * public abstract java.lang.Object java.sql.Array.getArray(java.util.Map)
	 * throws java.sql.SQLException
	 */
	private static final Method m3 = getMethod(java.sql.Array.class, "getArray", new Class[] { java.util.Map.class });

	public Object getArray(Map p0) throws java.sql.SQLException {
		return (Object) invoke(m3, new Object[] { p0 });
	}

	/**
	 * public abstract int java.sql.Array.getBaseType() throws
	 * java.sql.SQLException
	 */
	private static final Method m4 = getMethod(java.sql.Array.class, "getBaseType", new Class[] {});

	public int getBaseType() throws java.sql.SQLException {
		return ((Integer) invoke(m4, new Object[] {})).intValue();
	}

	/**
	 * public abstract java.lang.String java.sql.Array.getBaseTypeName() throws
	 * java.sql.SQLException
	 */
	private static final Method m5 = getMethod(java.sql.Array.class, "getBaseTypeName", new Class[] {});

	public java.lang.String getBaseTypeName() throws java.sql.SQLException {
		return (java.lang.String) invoke(m5, new Object[] {});
	}

	/**
	 * public abstract java.sql.ResultSet java.sql.Array.getResultSet() throws
	 * java.sql.SQLException
	 */
	private static final Method m6 = getMethod(java.sql.Array.class, "getResultSet", new Class[] {});

	public java.sql.ResultSet getResultSet() throws java.sql.SQLException {
		return (java.sql.ResultSet) invoke(m6, new Object[] {});
	}

	/**
	 * public abstract java.sql.ResultSet java.sql.Array.getResultSet(long,int)
	 * throws java.sql.SQLException
	 */
	private static final Method m7 = getMethod(java.sql.Array.class, "getResultSet", new Class[] { long.class,
			int.class });

	public java.sql.ResultSet getResultSet(long p0, int p1) throws java.sql.SQLException {
		return (java.sql.ResultSet) invoke(m7, new Object[] { new Long(p0), new Integer(p1) });
	}

	/**
	 * public abstract java.sql.ResultSet
	 * java.sql.Array.getResultSet(long,int,java.util.Map) throws
	 * java.sql.SQLException
	 */
	private static final Method m8 = getMethod(java.sql.Array.class, "getResultSet", new Class[] { long.class,
			int.class, java.util.Map.class });

	public java.sql.ResultSet getResultSet(long p0, int p1, java.util.Map p2) throws java.sql.SQLException {
		return (java.sql.ResultSet) invoke(m8, new Object[] { new Long(p0), new Integer(p1), p2 });
	}

	/**
	 * public abstract java.sql.ResultSet
	 * java.sql.Array.getResultSet(java.util.Map) throws java.sql.SQLException
	 */
	private static final Method m9 = getMethod(java.sql.Array.class, "getResultSet",
			new Class[] { java.util.Map.class });

	public java.sql.ResultSet getResultSet(Map p0) throws java.sql.SQLException {
		return (java.sql.ResultSet) invoke(m9, new Object[] { p0 });
	}
}
