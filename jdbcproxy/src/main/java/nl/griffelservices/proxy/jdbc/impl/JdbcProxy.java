/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc.impl;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Driver;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLData;
import java.sql.SQLInput;
import java.sql.SQLOutput;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;

import nl.griffelservices.proxy.Handler;
import nl.griffelservices.proxy.Proxy;

/**
 * This class implements the generic functionality for
 * nl.griffelservices.proxy.jdbc
 */
public abstract class JdbcProxy extends Proxy {
	/**
	 * Constructs a new JdbcProxy object.
	 * 
	 * @param handler
	 *            the proxy handler
	 * @param proxyClass
	 *            the proxy class
	 * @param proxyObject
	 *            the proxy data
	 */
	protected JdbcProxy(Handler handler, Class<?> proxyClass, Object proxyObject) {
		super(handler, proxyObject);
		handler.init(proxyClass, proxyObject);
	}

	public Class<?> narrowReturnType(Class<?> returnType, Object returnValue) {
		returnType = narrowReturnType(returnType, returnValue, Array.class);
		returnType = narrowReturnType(returnType, returnValue, Blob.class);
		returnType = narrowReturnType(returnType, returnValue, CallableStatement.class);
		returnType = narrowReturnType(returnType, returnValue, Clob.class);
		returnType = narrowReturnType(returnType, returnValue, Connection.class);
		returnType = narrowReturnType(returnType, returnValue, DatabaseMetaData.class);
		returnType = narrowReturnType(returnType, returnValue, Driver.class);
		returnType = narrowReturnType(returnType, returnValue, ParameterMetaData.class);
		returnType = narrowReturnType(returnType, returnValue, PreparedStatement.class);
		returnType = narrowReturnType(returnType, returnValue, Ref.class);
		returnType = narrowReturnType(returnType, returnValue, ResultSetMetaData.class);
		returnType = narrowReturnType(returnType, returnValue, ResultSet.class);
		returnType = narrowReturnType(returnType, returnValue, Savepoint.class);
		returnType = narrowReturnType(returnType, returnValue, SQLData.class);
		returnType = narrowReturnType(returnType, returnValue, SQLInput.class);
		returnType = narrowReturnType(returnType, returnValue, SQLOutput.class);
		returnType = narrowReturnType(returnType, returnValue, Statement.class);
		returnType = narrowReturnType(returnType, returnValue, Struct.class);
		return returnType;
	}

	public Object getReturnValueProxy(Class<?> returnType, Handler handler, Object proxyObject) {
		if (proxyObject == null)
			return null;
		if (returnType.equals(Array.class))
			return new ArrayProxy(handler, proxyObject);
		if (returnType.equals(Blob.class))
			return new BlobProxy(handler, proxyObject);
		if (returnType.equals(CallableStatement.class))
			return new CallableStatementProxy(handler, proxyObject);
		if (returnType.equals(Clob.class))
			return new ClobProxy(handler, proxyObject);
		if (returnType.equals(Connection.class))
			return new ConnectionProxy(handler, proxyObject);
		if (returnType.equals(DatabaseMetaData.class))
			return new DatabaseMetaDataProxy(handler, proxyObject);
		if (returnType.equals(Driver.class))
			return new DriverProxy(handler, proxyObject);
		if (returnType.equals(ParameterMetaData.class))
			return new ParameterMetaDataProxy(handler, proxyObject);
		if (returnType.equals(PreparedStatement.class))
			return new PreparedStatementProxy(handler, proxyObject);
		if (returnType.equals(Ref.class))
			return new RefProxy(handler, proxyObject);
		if (returnType.equals(ResultSetMetaData.class))
			return new ResultSetMetaDataProxy(handler, proxyObject);
		if (returnType.equals(ResultSet.class))
			return new ResultSetProxy(handler, proxyObject);
		if (returnType.equals(Savepoint.class))
			return new SavepointProxy(handler, proxyObject);
		if (returnType.equals(SQLData.class))
			return new SQLDataProxy(handler, proxyObject);
		if (returnType.equals(SQLInput.class))
			return new SQLInputProxy(handler, proxyObject);
		if (returnType.equals(SQLOutput.class))
			return new SQLOutputProxy(handler, proxyObject);
		if (returnType.equals(Statement.class))
			return new StatementProxy(handler, proxyObject);
		if (returnType.equals(Struct.class))
			return new StructProxy(handler, proxyObject);
		return proxyObject;
	}
}
