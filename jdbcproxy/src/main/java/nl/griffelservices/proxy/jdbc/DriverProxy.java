/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.Driver */
public class DriverProxy extends JdbcProxy implements java.sql.Driver
{
  /**
   * Constructs a new DriverProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public DriverProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.Driver.class, proxyObject);
  }

  /** public abstract java.sql.Connection java.sql.Driver.connect(java.lang.String,java.util.Properties) throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.Driver.class, "connect", new Class[] {java.lang.String.class, java.util.Properties.class});
  public java.sql.Connection connect(java.lang.String p0, java.util.Properties p1) throws java.sql.SQLException
  {
    return (java.sql.Connection)invoke(m0, new Object[] {p0, p1});
  }

  /** public abstract boolean java.sql.Driver.acceptsURL(java.lang.String) throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.Driver.class, "acceptsURL", new Class[] {java.lang.String.class});
  public boolean acceptsURL(java.lang.String p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m1, new Object[] {p0})).booleanValue();
  }

  /** public abstract int java.sql.Driver.getMajorVersion() */
  private static final Method m2 = getMethod(java.sql.Driver.class, "getMajorVersion", new Class[] {});
  public int getMajorVersion()
  {
    return ((Integer)invoke(m2, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.Driver.getMinorVersion() */
  private static final Method m3 = getMethod(java.sql.Driver.class, "getMinorVersion", new Class[] {});
  public int getMinorVersion()
  {
    return ((Integer)invoke(m3, new Object[] {})).intValue();
  }

  /** public abstract java.sql.DriverPropertyInfo[] java.sql.Driver.getPropertyInfo(java.lang.String,java.util.Properties) throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.Driver.class, "getPropertyInfo", new Class[] {java.lang.String.class, java.util.Properties.class});
  public java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String p0, java.util.Properties p1) throws java.sql.SQLException
  {
    return (java.sql.DriverPropertyInfo[])invoke(m4, new Object[] {p0, p1});
  }

  /** public abstract boolean java.sql.Driver.jdbcCompliant() */
  private static final Method m5 = getMethod(java.sql.Driver.class, "jdbcCompliant", new Class[] {});
  public boolean jdbcCompliant()
  {
    return ((Boolean)invoke(m5, new Object[] {})).booleanValue();
  }
}
