/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc;

import java.lang.reflect.Method;
import java.sql.Driver;
import java.sql.DriverPropertyInfo;
import java.sql.SQLException;

import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of Driver */
public class DriverProxy extends JdbcProxy implements Driver {

	/**
	 * public abstract java.sql.Connection
	 * Driver.connect(java.lang.String,java.util.Properties) throws SQLException
	 */
	private static final Method m0_connect = getMethod(Driver.class, "connect", new Class[] { java.lang.String.class,
			java.util.Properties.class });
	/**
	 * public abstract boolean Driver.acceptsURL(java.lang.String) throws
	 * SQLException
	 */
	private static final Method m1_acceptsURL = getMethod(Driver.class, "acceptsURL",
			new Class[] { java.lang.String.class });
	/** public abstract int Driver.getMajorVersion() */
	private static final Method m2_getMajorVersion = getMethod(Driver.class, "getMajorVersion", new Class[] {});

	/** public abstract int Driver.getMinorVersion() */
	private static final Method m3_getMinorVersion = getMethod(Driver.class, "getMinorVersion", new Class[] {});
	/**
	 * public abstract DriverPropertyInfo[]
	 * Driver.getPropertyInfo(java.lang.String,java.util.Properties) throws
	 * SQLException
	 */
	private static final Method m4_getPropertyInfo = getMethod(Driver.class, "getPropertyInfo", new Class[] {
			java.lang.String.class, java.util.Properties.class });
	/** public abstract boolean Driver.jdbcCompliant() */
	private static final Method m5_jdbcCompliant = getMethod(Driver.class, "jdbcCompliant", new Class[] {});

	/**
	 * Constructs a new DriverProxy object.
	 * 
	 * @param handler
	 *            the proxy handler
	 * @param proxyObject
	 *            the proxy data
	 */
	public DriverProxy(Handler handler, Object proxyObject) {
		super(handler, Driver.class, proxyObject);
	}

	public java.sql.Connection connect(java.lang.String p0, java.util.Properties p1) throws SQLException {
		return (java.sql.Connection) invoke(m0_connect, new Object[] { p0, p1 });
	}

	public boolean acceptsURL(java.lang.String p0) throws SQLException {
		return ((Boolean) invoke(m1_acceptsURL, new Object[] { p0 })).booleanValue();
	}

	public int getMajorVersion() {
		return ((Integer) invoke(m2_getMajorVersion, new Object[] {})).intValue();
	}

	public int getMinorVersion() {
		return ((Integer) invoke(m3_getMinorVersion, new Object[] {})).intValue();
	}

	public DriverPropertyInfo[] getPropertyInfo(java.lang.String p0, java.util.Properties p1) throws SQLException {
		return (DriverPropertyInfo[]) invoke(m4_getPropertyInfo, new Object[] { p0, p1 });
	}

	public boolean jdbcCompliant() {
		return ((Boolean) invoke(m5_jdbcCompliant, new Object[] {})).booleanValue();
	}
}
