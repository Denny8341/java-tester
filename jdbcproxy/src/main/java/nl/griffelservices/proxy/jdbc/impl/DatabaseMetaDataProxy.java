/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.DatabaseMetaData */
public class DatabaseMetaDataProxy extends JdbcProxy implements java.sql.DatabaseMetaData
{
  /**
   * Constructs a new DatabaseMetaDataProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public DatabaseMetaDataProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.DatabaseMetaData.class, proxyObject);
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getURL() throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.DatabaseMetaData.class, "getURL", new Class[] {});
  public java.lang.String getURL() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m0, new Object[] {});
  }

  /** public abstract boolean java.sql.DatabaseMetaData.isReadOnly() throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.DatabaseMetaData.class, "isReadOnly", new Class[] {});
  public boolean isReadOnly() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m1, new Object[] {})).booleanValue();
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.DatabaseMetaData.class, "getAttributes", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getAttributes(java.lang.String p0, java.lang.String p1, java.lang.String p2, java.lang.String p3) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m2, new Object[] {p0, p1, p2, p3});
  }

  /** public abstract java.sql.Connection java.sql.DatabaseMetaData.getConnection() throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.DatabaseMetaData.class, "getConnection", new Class[] {});
  public java.sql.Connection getConnection() throws java.sql.SQLException
  {
    return (java.sql.Connection)invoke(m3, new Object[] {});
  }

  /** public abstract int java.sql.DatabaseMetaData.getResultSetHoldability() throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.DatabaseMetaData.class, "getResultSetHoldability", new Class[] {});
  public int getResultSetHoldability() throws java.sql.SQLException
  {
    return ((Integer)invoke(m4, new Object[] {})).intValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.allProceduresAreCallable() throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.DatabaseMetaData.class, "allProceduresAreCallable", new Class[] {});
  public boolean allProceduresAreCallable() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m5, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.allTablesAreSelectable() throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.DatabaseMetaData.class, "allTablesAreSelectable", new Class[] {});
  public boolean allTablesAreSelectable() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m6, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.dataDefinitionCausesTransactionCommit() throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.DatabaseMetaData.class, "dataDefinitionCausesTransactionCommit", new Class[] {});
  public boolean dataDefinitionCausesTransactionCommit() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m7, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.dataDefinitionIgnoredInTransactions() throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.DatabaseMetaData.class, "dataDefinitionIgnoredInTransactions", new Class[] {});
  public boolean dataDefinitionIgnoredInTransactions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m8, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.deletesAreDetected(int) throws java.sql.SQLException */
  private static final Method m9 = getMethod(java.sql.DatabaseMetaData.class, "deletesAreDetected", new Class[] {int.class});
  public boolean deletesAreDetected(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m9, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.doesMaxRowSizeIncludeBlobs() throws java.sql.SQLException */
  private static final Method m10 = getMethod(java.sql.DatabaseMetaData.class, "doesMaxRowSizeIncludeBlobs", new Class[] {});
  public boolean doesMaxRowSizeIncludeBlobs() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m10, new Object[] {})).booleanValue();
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean) throws java.sql.SQLException */
  private static final Method m11 = getMethod(java.sql.DatabaseMetaData.class, "getBestRowIdentifier", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, int.class, boolean.class});
  public java.sql.ResultSet getBestRowIdentifier(java.lang.String p0, java.lang.String p1, java.lang.String p2, int p3, boolean p4) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m11, new Object[] {p0, p1, p2, new Integer(p3), new Boolean(p4)});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getCatalogSeparator() throws java.sql.SQLException */
  private static final Method m12 = getMethod(java.sql.DatabaseMetaData.class, "getCatalogSeparator", new Class[] {});
  public java.lang.String getCatalogSeparator() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m12, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getCatalogTerm() throws java.sql.SQLException */
  private static final Method m13 = getMethod(java.sql.DatabaseMetaData.class, "getCatalogTerm", new Class[] {});
  public java.lang.String getCatalogTerm() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m13, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getCatalogs() throws java.sql.SQLException */
  private static final Method m14 = getMethod(java.sql.DatabaseMetaData.class, "getCatalogs", new Class[] {});
  public java.sql.ResultSet getCatalogs() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m14, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m15 = getMethod(java.sql.DatabaseMetaData.class, "getColumnPrivileges", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getColumnPrivileges(java.lang.String p0, java.lang.String p1, java.lang.String p2, java.lang.String p3) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m15, new Object[] {p0, p1, p2, p3});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m16 = getMethod(java.sql.DatabaseMetaData.class, "getColumns", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getColumns(java.lang.String p0, java.lang.String p1, java.lang.String p2, java.lang.String p3) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m16, new Object[] {p0, p1, p2, p3});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m17 = getMethod(java.sql.DatabaseMetaData.class, "getCrossReference", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getCrossReference(java.lang.String p0, java.lang.String p1, java.lang.String p2, java.lang.String p3, java.lang.String p4, java.lang.String p5) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m17, new Object[] {p0, p1, p2, p3, p4, p5});
  }

  /** public abstract int java.sql.DatabaseMetaData.getDatabaseMajorVersion() throws java.sql.SQLException */
  private static final Method m18 = getMethod(java.sql.DatabaseMetaData.class, "getDatabaseMajorVersion", new Class[] {});
  public int getDatabaseMajorVersion() throws java.sql.SQLException
  {
    return ((Integer)invoke(m18, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getDatabaseMinorVersion() throws java.sql.SQLException */
  private static final Method m19 = getMethod(java.sql.DatabaseMetaData.class, "getDatabaseMinorVersion", new Class[] {});
  public int getDatabaseMinorVersion() throws java.sql.SQLException
  {
    return ((Integer)invoke(m19, new Object[] {})).intValue();
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getDatabaseProductName() throws java.sql.SQLException */
  private static final Method m20 = getMethod(java.sql.DatabaseMetaData.class, "getDatabaseProductName", new Class[] {});
  public java.lang.String getDatabaseProductName() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m20, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getDatabaseProductVersion() throws java.sql.SQLException */
  private static final Method m21 = getMethod(java.sql.DatabaseMetaData.class, "getDatabaseProductVersion", new Class[] {});
  public java.lang.String getDatabaseProductVersion() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m21, new Object[] {});
  }

  /** public abstract int java.sql.DatabaseMetaData.getDefaultTransactionIsolation() throws java.sql.SQLException */
  private static final Method m22 = getMethod(java.sql.DatabaseMetaData.class, "getDefaultTransactionIsolation", new Class[] {});
  public int getDefaultTransactionIsolation() throws java.sql.SQLException
  {
    return ((Integer)invoke(m22, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getDriverMajorVersion() */
  private static final Method m23 = getMethod(java.sql.DatabaseMetaData.class, "getDriverMajorVersion", new Class[] {});
  public int getDriverMajorVersion()
  {
    return ((Integer)invoke(m23, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getDriverMinorVersion() */
  private static final Method m24 = getMethod(java.sql.DatabaseMetaData.class, "getDriverMinorVersion", new Class[] {});
  public int getDriverMinorVersion()
  {
    return ((Integer)invoke(m24, new Object[] {})).intValue();
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getDriverName() throws java.sql.SQLException */
  private static final Method m25 = getMethod(java.sql.DatabaseMetaData.class, "getDriverName", new Class[] {});
  public java.lang.String getDriverName() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m25, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getDriverVersion() throws java.sql.SQLException */
  private static final Method m26 = getMethod(java.sql.DatabaseMetaData.class, "getDriverVersion", new Class[] {});
  public java.lang.String getDriverVersion() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m26, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getExportedKeys(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m27 = getMethod(java.sql.DatabaseMetaData.class, "getExportedKeys", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getExportedKeys(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m27, new Object[] {p0, p1, p2});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getExtraNameCharacters() throws java.sql.SQLException */
  private static final Method m28 = getMethod(java.sql.DatabaseMetaData.class, "getExtraNameCharacters", new Class[] {});
  public java.lang.String getExtraNameCharacters() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m28, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getIdentifierQuoteString() throws java.sql.SQLException */
  private static final Method m29 = getMethod(java.sql.DatabaseMetaData.class, "getIdentifierQuoteString", new Class[] {});
  public java.lang.String getIdentifierQuoteString() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m29, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getImportedKeys(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m30 = getMethod(java.sql.DatabaseMetaData.class, "getImportedKeys", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getImportedKeys(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m30, new Object[] {p0, p1, p2});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean) throws java.sql.SQLException */
  private static final Method m31 = getMethod(java.sql.DatabaseMetaData.class, "getIndexInfo", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, boolean.class, boolean.class});
  public java.sql.ResultSet getIndexInfo(java.lang.String p0, java.lang.String p1, java.lang.String p2, boolean p3, boolean p4) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m31, new Object[] {p0, p1, p2, new Boolean(p3), new Boolean(p4)});
  }

  /** public abstract int java.sql.DatabaseMetaData.getJDBCMajorVersion() throws java.sql.SQLException */
  private static final Method m32 = getMethod(java.sql.DatabaseMetaData.class, "getJDBCMajorVersion", new Class[] {});
  public int getJDBCMajorVersion() throws java.sql.SQLException
  {
    return ((Integer)invoke(m32, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getJDBCMinorVersion() throws java.sql.SQLException */
  private static final Method m33 = getMethod(java.sql.DatabaseMetaData.class, "getJDBCMinorVersion", new Class[] {});
  public int getJDBCMinorVersion() throws java.sql.SQLException
  {
    return ((Integer)invoke(m33, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxBinaryLiteralLength() throws java.sql.SQLException */
  private static final Method m34 = getMethod(java.sql.DatabaseMetaData.class, "getMaxBinaryLiteralLength", new Class[] {});
  public int getMaxBinaryLiteralLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m34, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxCatalogNameLength() throws java.sql.SQLException */
  private static final Method m35 = getMethod(java.sql.DatabaseMetaData.class, "getMaxCatalogNameLength", new Class[] {});
  public int getMaxCatalogNameLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m35, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxCharLiteralLength() throws java.sql.SQLException */
  private static final Method m36 = getMethod(java.sql.DatabaseMetaData.class, "getMaxCharLiteralLength", new Class[] {});
  public int getMaxCharLiteralLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m36, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxColumnNameLength() throws java.sql.SQLException */
  private static final Method m37 = getMethod(java.sql.DatabaseMetaData.class, "getMaxColumnNameLength", new Class[] {});
  public int getMaxColumnNameLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m37, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxColumnsInGroupBy() throws java.sql.SQLException */
  private static final Method m38 = getMethod(java.sql.DatabaseMetaData.class, "getMaxColumnsInGroupBy", new Class[] {});
  public int getMaxColumnsInGroupBy() throws java.sql.SQLException
  {
    return ((Integer)invoke(m38, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxColumnsInIndex() throws java.sql.SQLException */
  private static final Method m39 = getMethod(java.sql.DatabaseMetaData.class, "getMaxColumnsInIndex", new Class[] {});
  public int getMaxColumnsInIndex() throws java.sql.SQLException
  {
    return ((Integer)invoke(m39, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxColumnsInOrderBy() throws java.sql.SQLException */
  private static final Method m40 = getMethod(java.sql.DatabaseMetaData.class, "getMaxColumnsInOrderBy", new Class[] {});
  public int getMaxColumnsInOrderBy() throws java.sql.SQLException
  {
    return ((Integer)invoke(m40, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxColumnsInSelect() throws java.sql.SQLException */
  private static final Method m41 = getMethod(java.sql.DatabaseMetaData.class, "getMaxColumnsInSelect", new Class[] {});
  public int getMaxColumnsInSelect() throws java.sql.SQLException
  {
    return ((Integer)invoke(m41, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxColumnsInTable() throws java.sql.SQLException */
  private static final Method m42 = getMethod(java.sql.DatabaseMetaData.class, "getMaxColumnsInTable", new Class[] {});
  public int getMaxColumnsInTable() throws java.sql.SQLException
  {
    return ((Integer)invoke(m42, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxConnections() throws java.sql.SQLException */
  private static final Method m43 = getMethod(java.sql.DatabaseMetaData.class, "getMaxConnections", new Class[] {});
  public int getMaxConnections() throws java.sql.SQLException
  {
    return ((Integer)invoke(m43, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxCursorNameLength() throws java.sql.SQLException */
  private static final Method m44 = getMethod(java.sql.DatabaseMetaData.class, "getMaxCursorNameLength", new Class[] {});
  public int getMaxCursorNameLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m44, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxIndexLength() throws java.sql.SQLException */
  private static final Method m45 = getMethod(java.sql.DatabaseMetaData.class, "getMaxIndexLength", new Class[] {});
  public int getMaxIndexLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m45, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxProcedureNameLength() throws java.sql.SQLException */
  private static final Method m46 = getMethod(java.sql.DatabaseMetaData.class, "getMaxProcedureNameLength", new Class[] {});
  public int getMaxProcedureNameLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m46, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxRowSize() throws java.sql.SQLException */
  private static final Method m47 = getMethod(java.sql.DatabaseMetaData.class, "getMaxRowSize", new Class[] {});
  public int getMaxRowSize() throws java.sql.SQLException
  {
    return ((Integer)invoke(m47, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxSchemaNameLength() throws java.sql.SQLException */
  private static final Method m48 = getMethod(java.sql.DatabaseMetaData.class, "getMaxSchemaNameLength", new Class[] {});
  public int getMaxSchemaNameLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m48, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxStatementLength() throws java.sql.SQLException */
  private static final Method m49 = getMethod(java.sql.DatabaseMetaData.class, "getMaxStatementLength", new Class[] {});
  public int getMaxStatementLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m49, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxStatements() throws java.sql.SQLException */
  private static final Method m50 = getMethod(java.sql.DatabaseMetaData.class, "getMaxStatements", new Class[] {});
  public int getMaxStatements() throws java.sql.SQLException
  {
    return ((Integer)invoke(m50, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxTableNameLength() throws java.sql.SQLException */
  private static final Method m51 = getMethod(java.sql.DatabaseMetaData.class, "getMaxTableNameLength", new Class[] {});
  public int getMaxTableNameLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m51, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxTablesInSelect() throws java.sql.SQLException */
  private static final Method m52 = getMethod(java.sql.DatabaseMetaData.class, "getMaxTablesInSelect", new Class[] {});
  public int getMaxTablesInSelect() throws java.sql.SQLException
  {
    return ((Integer)invoke(m52, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.DatabaseMetaData.getMaxUserNameLength() throws java.sql.SQLException */
  private static final Method m53 = getMethod(java.sql.DatabaseMetaData.class, "getMaxUserNameLength", new Class[] {});
  public int getMaxUserNameLength() throws java.sql.SQLException
  {
    return ((Integer)invoke(m53, new Object[] {})).intValue();
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getNumericFunctions() throws java.sql.SQLException */
  private static final Method m54 = getMethod(java.sql.DatabaseMetaData.class, "getNumericFunctions", new Class[] {});
  public java.lang.String getNumericFunctions() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m54, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m55 = getMethod(java.sql.DatabaseMetaData.class, "getPrimaryKeys", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getPrimaryKeys(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m55, new Object[] {p0, p1, p2});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m56 = getMethod(java.sql.DatabaseMetaData.class, "getProcedureColumns", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getProcedureColumns(java.lang.String p0, java.lang.String p1, java.lang.String p2, java.lang.String p3) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m56, new Object[] {p0, p1, p2, p3});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getProcedureTerm() throws java.sql.SQLException */
  private static final Method m57 = getMethod(java.sql.DatabaseMetaData.class, "getProcedureTerm", new Class[] {});
  public java.lang.String getProcedureTerm() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m57, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getProcedures(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m58 = getMethod(java.sql.DatabaseMetaData.class, "getProcedures", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getProcedures(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m58, new Object[] {p0, p1, p2});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getSQLKeywords() throws java.sql.SQLException */
  private static final Method m59 = getMethod(java.sql.DatabaseMetaData.class, "getSQLKeywords", new Class[] {});
  public java.lang.String getSQLKeywords() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m59, new Object[] {});
  }

  /** public abstract int java.sql.DatabaseMetaData.getSQLStateType() throws java.sql.SQLException */
  private static final Method m60 = getMethod(java.sql.DatabaseMetaData.class, "getSQLStateType", new Class[] {});
  public int getSQLStateType() throws java.sql.SQLException
  {
    return ((Integer)invoke(m60, new Object[] {})).intValue();
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getSchemaTerm() throws java.sql.SQLException */
  private static final Method m61 = getMethod(java.sql.DatabaseMetaData.class, "getSchemaTerm", new Class[] {});
  public java.lang.String getSchemaTerm() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m61, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getSchemas() throws java.sql.SQLException */
  private static final Method m62 = getMethod(java.sql.DatabaseMetaData.class, "getSchemas", new Class[] {});
  public java.sql.ResultSet getSchemas() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m62, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getSearchStringEscape() throws java.sql.SQLException */
  private static final Method m63 = getMethod(java.sql.DatabaseMetaData.class, "getSearchStringEscape", new Class[] {});
  public java.lang.String getSearchStringEscape() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m63, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getStringFunctions() throws java.sql.SQLException */
  private static final Method m64 = getMethod(java.sql.DatabaseMetaData.class, "getStringFunctions", new Class[] {});
  public java.lang.String getStringFunctions() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m64, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getSuperTables(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m65 = getMethod(java.sql.DatabaseMetaData.class, "getSuperTables", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getSuperTables(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m65, new Object[] {p0, p1, p2});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getSuperTypes(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m66 = getMethod(java.sql.DatabaseMetaData.class, "getSuperTypes", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getSuperTypes(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m66, new Object[] {p0, p1, p2});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getSystemFunctions() throws java.sql.SQLException */
  private static final Method m67 = getMethod(java.sql.DatabaseMetaData.class, "getSystemFunctions", new Class[] {});
  public java.lang.String getSystemFunctions() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m67, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getTablePrivileges(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m68 = getMethod(java.sql.DatabaseMetaData.class, "getTablePrivileges", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getTablePrivileges(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m68, new Object[] {p0, p1, p2});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getTableTypes() throws java.sql.SQLException */
  private static final Method m69 = getMethod(java.sql.DatabaseMetaData.class, "getTableTypes", new Class[] {});
  public java.sql.ResultSet getTableTypes() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m69, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) throws java.sql.SQLException */
  private static final Method m70 = getMethod(java.sql.DatabaseMetaData.class, "getTables", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String[].class});
  public java.sql.ResultSet getTables(java.lang.String p0, java.lang.String p1, java.lang.String p2, java.lang.String[] p3) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m70, new Object[] {p0, p1, p2, p3});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getTimeDateFunctions() throws java.sql.SQLException */
  private static final Method m71 = getMethod(java.sql.DatabaseMetaData.class, "getTimeDateFunctions", new Class[] {});
  public java.lang.String getTimeDateFunctions() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m71, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getTypeInfo() throws java.sql.SQLException */
  private static final Method m72 = getMethod(java.sql.DatabaseMetaData.class, "getTypeInfo", new Class[] {});
  public java.sql.ResultSet getTypeInfo() throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m72, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getUDTs(java.lang.String,java.lang.String,java.lang.String,int[]) throws java.sql.SQLException */
  private static final Method m73 = getMethod(java.sql.DatabaseMetaData.class, "getUDTs", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, int[].class});
  public java.sql.ResultSet getUDTs(java.lang.String p0, java.lang.String p1, java.lang.String p2, int[] p3) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m73, new Object[] {p0, p1, p2, p3});
  }

  /** public abstract java.lang.String java.sql.DatabaseMetaData.getUserName() throws java.sql.SQLException */
  private static final Method m74 = getMethod(java.sql.DatabaseMetaData.class, "getUserName", new Class[] {});
  public java.lang.String getUserName() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m74, new Object[] {});
  }

  /** public abstract java.sql.ResultSet java.sql.DatabaseMetaData.getVersionColumns(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException */
  private static final Method m75 = getMethod(java.sql.DatabaseMetaData.class, "getVersionColumns", new Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
  public java.sql.ResultSet getVersionColumns(java.lang.String p0, java.lang.String p1, java.lang.String p2) throws java.sql.SQLException
  {
    return (java.sql.ResultSet)invoke(m75, new Object[] {p0, p1, p2});
  }

  /** public abstract boolean java.sql.DatabaseMetaData.insertsAreDetected(int) throws java.sql.SQLException */
  private static final Method m76 = getMethod(java.sql.DatabaseMetaData.class, "insertsAreDetected", new Class[] {int.class});
  public boolean insertsAreDetected(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m76, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.isCatalogAtStart() throws java.sql.SQLException */
  private static final Method m77 = getMethod(java.sql.DatabaseMetaData.class, "isCatalogAtStart", new Class[] {});
  public boolean isCatalogAtStart() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m77, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.locatorsUpdateCopy() throws java.sql.SQLException */
  private static final Method m78 = getMethod(java.sql.DatabaseMetaData.class, "locatorsUpdateCopy", new Class[] {});
  public boolean locatorsUpdateCopy() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m78, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.nullPlusNonNullIsNull() throws java.sql.SQLException */
  private static final Method m79 = getMethod(java.sql.DatabaseMetaData.class, "nullPlusNonNullIsNull", new Class[] {});
  public boolean nullPlusNonNullIsNull() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m79, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.nullsAreSortedAtEnd() throws java.sql.SQLException */
  private static final Method m80 = getMethod(java.sql.DatabaseMetaData.class, "nullsAreSortedAtEnd", new Class[] {});
  public boolean nullsAreSortedAtEnd() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m80, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.nullsAreSortedAtStart() throws java.sql.SQLException */
  private static final Method m81 = getMethod(java.sql.DatabaseMetaData.class, "nullsAreSortedAtStart", new Class[] {});
  public boolean nullsAreSortedAtStart() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m81, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.nullsAreSortedHigh() throws java.sql.SQLException */
  private static final Method m82 = getMethod(java.sql.DatabaseMetaData.class, "nullsAreSortedHigh", new Class[] {});
  public boolean nullsAreSortedHigh() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m82, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.nullsAreSortedLow() throws java.sql.SQLException */
  private static final Method m83 = getMethod(java.sql.DatabaseMetaData.class, "nullsAreSortedLow", new Class[] {});
  public boolean nullsAreSortedLow() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m83, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.othersDeletesAreVisible(int) throws java.sql.SQLException */
  private static final Method m84 = getMethod(java.sql.DatabaseMetaData.class, "othersDeletesAreVisible", new Class[] {int.class});
  public boolean othersDeletesAreVisible(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m84, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.othersInsertsAreVisible(int) throws java.sql.SQLException */
  private static final Method m85 = getMethod(java.sql.DatabaseMetaData.class, "othersInsertsAreVisible", new Class[] {int.class});
  public boolean othersInsertsAreVisible(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m85, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.othersUpdatesAreVisible(int) throws java.sql.SQLException */
  private static final Method m86 = getMethod(java.sql.DatabaseMetaData.class, "othersUpdatesAreVisible", new Class[] {int.class});
  public boolean othersUpdatesAreVisible(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m86, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.ownDeletesAreVisible(int) throws java.sql.SQLException */
  private static final Method m87 = getMethod(java.sql.DatabaseMetaData.class, "ownDeletesAreVisible", new Class[] {int.class});
  public boolean ownDeletesAreVisible(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m87, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.ownInsertsAreVisible(int) throws java.sql.SQLException */
  private static final Method m88 = getMethod(java.sql.DatabaseMetaData.class, "ownInsertsAreVisible", new Class[] {int.class});
  public boolean ownInsertsAreVisible(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m88, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.ownUpdatesAreVisible(int) throws java.sql.SQLException */
  private static final Method m89 = getMethod(java.sql.DatabaseMetaData.class, "ownUpdatesAreVisible", new Class[] {int.class});
  public boolean ownUpdatesAreVisible(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m89, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.storesLowerCaseIdentifiers() throws java.sql.SQLException */
  private static final Method m90 = getMethod(java.sql.DatabaseMetaData.class, "storesLowerCaseIdentifiers", new Class[] {});
  public boolean storesLowerCaseIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m90, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.storesLowerCaseQuotedIdentifiers() throws java.sql.SQLException */
  private static final Method m91 = getMethod(java.sql.DatabaseMetaData.class, "storesLowerCaseQuotedIdentifiers", new Class[] {});
  public boolean storesLowerCaseQuotedIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m91, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.storesMixedCaseIdentifiers() throws java.sql.SQLException */
  private static final Method m92 = getMethod(java.sql.DatabaseMetaData.class, "storesMixedCaseIdentifiers", new Class[] {});
  public boolean storesMixedCaseIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m92, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.storesMixedCaseQuotedIdentifiers() throws java.sql.SQLException */
  private static final Method m93 = getMethod(java.sql.DatabaseMetaData.class, "storesMixedCaseQuotedIdentifiers", new Class[] {});
  public boolean storesMixedCaseQuotedIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m93, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.storesUpperCaseIdentifiers() throws java.sql.SQLException */
  private static final Method m94 = getMethod(java.sql.DatabaseMetaData.class, "storesUpperCaseIdentifiers", new Class[] {});
  public boolean storesUpperCaseIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m94, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.storesUpperCaseQuotedIdentifiers() throws java.sql.SQLException */
  private static final Method m95 = getMethod(java.sql.DatabaseMetaData.class, "storesUpperCaseQuotedIdentifiers", new Class[] {});
  public boolean storesUpperCaseQuotedIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m95, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsANSI92EntryLevelSQL() throws java.sql.SQLException */
  private static final Method m96 = getMethod(java.sql.DatabaseMetaData.class, "supportsANSI92EntryLevelSQL", new Class[] {});
  public boolean supportsANSI92EntryLevelSQL() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m96, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsANSI92FullSQL() throws java.sql.SQLException */
  private static final Method m97 = getMethod(java.sql.DatabaseMetaData.class, "supportsANSI92FullSQL", new Class[] {});
  public boolean supportsANSI92FullSQL() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m97, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsANSI92IntermediateSQL() throws java.sql.SQLException */
  private static final Method m98 = getMethod(java.sql.DatabaseMetaData.class, "supportsANSI92IntermediateSQL", new Class[] {});
  public boolean supportsANSI92IntermediateSQL() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m98, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsAlterTableWithAddColumn() throws java.sql.SQLException */
  private static final Method m99 = getMethod(java.sql.DatabaseMetaData.class, "supportsAlterTableWithAddColumn", new Class[] {});
  public boolean supportsAlterTableWithAddColumn() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m99, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsAlterTableWithDropColumn() throws java.sql.SQLException */
  private static final Method m100 = getMethod(java.sql.DatabaseMetaData.class, "supportsAlterTableWithDropColumn", new Class[] {});
  public boolean supportsAlterTableWithDropColumn() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m100, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsBatchUpdates() throws java.sql.SQLException */
  private static final Method m101 = getMethod(java.sql.DatabaseMetaData.class, "supportsBatchUpdates", new Class[] {});
  public boolean supportsBatchUpdates() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m101, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsCatalogsInDataManipulation() throws java.sql.SQLException */
  private static final Method m102 = getMethod(java.sql.DatabaseMetaData.class, "supportsCatalogsInDataManipulation", new Class[] {});
  public boolean supportsCatalogsInDataManipulation() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m102, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsCatalogsInIndexDefinitions() throws java.sql.SQLException */
  private static final Method m103 = getMethod(java.sql.DatabaseMetaData.class, "supportsCatalogsInIndexDefinitions", new Class[] {});
  public boolean supportsCatalogsInIndexDefinitions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m103, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsCatalogsInPrivilegeDefinitions() throws java.sql.SQLException */
  private static final Method m104 = getMethod(java.sql.DatabaseMetaData.class, "supportsCatalogsInPrivilegeDefinitions", new Class[] {});
  public boolean supportsCatalogsInPrivilegeDefinitions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m104, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsCatalogsInProcedureCalls() throws java.sql.SQLException */
  private static final Method m105 = getMethod(java.sql.DatabaseMetaData.class, "supportsCatalogsInProcedureCalls", new Class[] {});
  public boolean supportsCatalogsInProcedureCalls() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m105, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsCatalogsInTableDefinitions() throws java.sql.SQLException */
  private static final Method m106 = getMethod(java.sql.DatabaseMetaData.class, "supportsCatalogsInTableDefinitions", new Class[] {});
  public boolean supportsCatalogsInTableDefinitions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m106, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsColumnAliasing() throws java.sql.SQLException */
  private static final Method m107 = getMethod(java.sql.DatabaseMetaData.class, "supportsColumnAliasing", new Class[] {});
  public boolean supportsColumnAliasing() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m107, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsConvert() throws java.sql.SQLException */
  private static final Method m108 = getMethod(java.sql.DatabaseMetaData.class, "supportsConvert", new Class[] {});
  public boolean supportsConvert() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m108, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsConvert(int,int) throws java.sql.SQLException */
  private static final Method m109 = getMethod(java.sql.DatabaseMetaData.class, "supportsConvert", new Class[] {int.class, int.class});
  public boolean supportsConvert(int p0, int p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m109, new Object[] {new Integer(p0), new Integer(p1)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsCoreSQLGrammar() throws java.sql.SQLException */
  private static final Method m110 = getMethod(java.sql.DatabaseMetaData.class, "supportsCoreSQLGrammar", new Class[] {});
  public boolean supportsCoreSQLGrammar() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m110, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsCorrelatedSubqueries() throws java.sql.SQLException */
  private static final Method m111 = getMethod(java.sql.DatabaseMetaData.class, "supportsCorrelatedSubqueries", new Class[] {});
  public boolean supportsCorrelatedSubqueries() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m111, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions() throws java.sql.SQLException */
  private static final Method m112 = getMethod(java.sql.DatabaseMetaData.class, "supportsDataDefinitionAndDataManipulationTransactions", new Class[] {});
  public boolean supportsDataDefinitionAndDataManipulationTransactions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m112, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsDataManipulationTransactionsOnly() throws java.sql.SQLException */
  private static final Method m113 = getMethod(java.sql.DatabaseMetaData.class, "supportsDataManipulationTransactionsOnly", new Class[] {});
  public boolean supportsDataManipulationTransactionsOnly() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m113, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsDifferentTableCorrelationNames() throws java.sql.SQLException */
  private static final Method m114 = getMethod(java.sql.DatabaseMetaData.class, "supportsDifferentTableCorrelationNames", new Class[] {});
  public boolean supportsDifferentTableCorrelationNames() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m114, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsExpressionsInOrderBy() throws java.sql.SQLException */
  private static final Method m115 = getMethod(java.sql.DatabaseMetaData.class, "supportsExpressionsInOrderBy", new Class[] {});
  public boolean supportsExpressionsInOrderBy() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m115, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsExtendedSQLGrammar() throws java.sql.SQLException */
  private static final Method m116 = getMethod(java.sql.DatabaseMetaData.class, "supportsExtendedSQLGrammar", new Class[] {});
  public boolean supportsExtendedSQLGrammar() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m116, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsFullOuterJoins() throws java.sql.SQLException */
  private static final Method m117 = getMethod(java.sql.DatabaseMetaData.class, "supportsFullOuterJoins", new Class[] {});
  public boolean supportsFullOuterJoins() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m117, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsGetGeneratedKeys() throws java.sql.SQLException */
  private static final Method m118 = getMethod(java.sql.DatabaseMetaData.class, "supportsGetGeneratedKeys", new Class[] {});
  public boolean supportsGetGeneratedKeys() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m118, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsGroupBy() throws java.sql.SQLException */
  private static final Method m119 = getMethod(java.sql.DatabaseMetaData.class, "supportsGroupBy", new Class[] {});
  public boolean supportsGroupBy() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m119, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsGroupByBeyondSelect() throws java.sql.SQLException */
  private static final Method m120 = getMethod(java.sql.DatabaseMetaData.class, "supportsGroupByBeyondSelect", new Class[] {});
  public boolean supportsGroupByBeyondSelect() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m120, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsGroupByUnrelated() throws java.sql.SQLException */
  private static final Method m121 = getMethod(java.sql.DatabaseMetaData.class, "supportsGroupByUnrelated", new Class[] {});
  public boolean supportsGroupByUnrelated() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m121, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsIntegrityEnhancementFacility() throws java.sql.SQLException */
  private static final Method m122 = getMethod(java.sql.DatabaseMetaData.class, "supportsIntegrityEnhancementFacility", new Class[] {});
  public boolean supportsIntegrityEnhancementFacility() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m122, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsLikeEscapeClause() throws java.sql.SQLException */
  private static final Method m123 = getMethod(java.sql.DatabaseMetaData.class, "supportsLikeEscapeClause", new Class[] {});
  public boolean supportsLikeEscapeClause() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m123, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsLimitedOuterJoins() throws java.sql.SQLException */
  private static final Method m124 = getMethod(java.sql.DatabaseMetaData.class, "supportsLimitedOuterJoins", new Class[] {});
  public boolean supportsLimitedOuterJoins() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m124, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsMinimumSQLGrammar() throws java.sql.SQLException */
  private static final Method m125 = getMethod(java.sql.DatabaseMetaData.class, "supportsMinimumSQLGrammar", new Class[] {});
  public boolean supportsMinimumSQLGrammar() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m125, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsMixedCaseIdentifiers() throws java.sql.SQLException */
  private static final Method m126 = getMethod(java.sql.DatabaseMetaData.class, "supportsMixedCaseIdentifiers", new Class[] {});
  public boolean supportsMixedCaseIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m126, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers() throws java.sql.SQLException */
  private static final Method m127 = getMethod(java.sql.DatabaseMetaData.class, "supportsMixedCaseQuotedIdentifiers", new Class[] {});
  public boolean supportsMixedCaseQuotedIdentifiers() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m127, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsMultipleOpenResults() throws java.sql.SQLException */
  private static final Method m128 = getMethod(java.sql.DatabaseMetaData.class, "supportsMultipleOpenResults", new Class[] {});
  public boolean supportsMultipleOpenResults() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m128, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsMultipleResultSets() throws java.sql.SQLException */
  private static final Method m129 = getMethod(java.sql.DatabaseMetaData.class, "supportsMultipleResultSets", new Class[] {});
  public boolean supportsMultipleResultSets() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m129, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsMultipleTransactions() throws java.sql.SQLException */
  private static final Method m130 = getMethod(java.sql.DatabaseMetaData.class, "supportsMultipleTransactions", new Class[] {});
  public boolean supportsMultipleTransactions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m130, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsNamedParameters() throws java.sql.SQLException */
  private static final Method m131 = getMethod(java.sql.DatabaseMetaData.class, "supportsNamedParameters", new Class[] {});
  public boolean supportsNamedParameters() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m131, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsNonNullableColumns() throws java.sql.SQLException */
  private static final Method m132 = getMethod(java.sql.DatabaseMetaData.class, "supportsNonNullableColumns", new Class[] {});
  public boolean supportsNonNullableColumns() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m132, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsOpenCursorsAcrossCommit() throws java.sql.SQLException */
  private static final Method m133 = getMethod(java.sql.DatabaseMetaData.class, "supportsOpenCursorsAcrossCommit", new Class[] {});
  public boolean supportsOpenCursorsAcrossCommit() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m133, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsOpenCursorsAcrossRollback() throws java.sql.SQLException */
  private static final Method m134 = getMethod(java.sql.DatabaseMetaData.class, "supportsOpenCursorsAcrossRollback", new Class[] {});
  public boolean supportsOpenCursorsAcrossRollback() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m134, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsOpenStatementsAcrossCommit() throws java.sql.SQLException */
  private static final Method m135 = getMethod(java.sql.DatabaseMetaData.class, "supportsOpenStatementsAcrossCommit", new Class[] {});
  public boolean supportsOpenStatementsAcrossCommit() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m135, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsOpenStatementsAcrossRollback() throws java.sql.SQLException */
  private static final Method m136 = getMethod(java.sql.DatabaseMetaData.class, "supportsOpenStatementsAcrossRollback", new Class[] {});
  public boolean supportsOpenStatementsAcrossRollback() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m136, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsOrderByUnrelated() throws java.sql.SQLException */
  private static final Method m137 = getMethod(java.sql.DatabaseMetaData.class, "supportsOrderByUnrelated", new Class[] {});
  public boolean supportsOrderByUnrelated() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m137, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsOuterJoins() throws java.sql.SQLException */
  private static final Method m138 = getMethod(java.sql.DatabaseMetaData.class, "supportsOuterJoins", new Class[] {});
  public boolean supportsOuterJoins() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m138, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsPositionedDelete() throws java.sql.SQLException */
  private static final Method m139 = getMethod(java.sql.DatabaseMetaData.class, "supportsPositionedDelete", new Class[] {});
  public boolean supportsPositionedDelete() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m139, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsPositionedUpdate() throws java.sql.SQLException */
  private static final Method m140 = getMethod(java.sql.DatabaseMetaData.class, "supportsPositionedUpdate", new Class[] {});
  public boolean supportsPositionedUpdate() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m140, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsResultSetConcurrency(int,int) throws java.sql.SQLException */
  private static final Method m141 = getMethod(java.sql.DatabaseMetaData.class, "supportsResultSetConcurrency", new Class[] {int.class, int.class});
  public boolean supportsResultSetConcurrency(int p0, int p1) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m141, new Object[] {new Integer(p0), new Integer(p1)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsResultSetHoldability(int) throws java.sql.SQLException */
  private static final Method m142 = getMethod(java.sql.DatabaseMetaData.class, "supportsResultSetHoldability", new Class[] {int.class});
  public boolean supportsResultSetHoldability(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m142, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsResultSetType(int) throws java.sql.SQLException */
  private static final Method m143 = getMethod(java.sql.DatabaseMetaData.class, "supportsResultSetType", new Class[] {int.class});
  public boolean supportsResultSetType(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m143, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSavepoints() throws java.sql.SQLException */
  private static final Method m144 = getMethod(java.sql.DatabaseMetaData.class, "supportsSavepoints", new Class[] {});
  public boolean supportsSavepoints() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m144, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSchemasInDataManipulation() throws java.sql.SQLException */
  private static final Method m145 = getMethod(java.sql.DatabaseMetaData.class, "supportsSchemasInDataManipulation", new Class[] {});
  public boolean supportsSchemasInDataManipulation() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m145, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSchemasInIndexDefinitions() throws java.sql.SQLException */
  private static final Method m146 = getMethod(java.sql.DatabaseMetaData.class, "supportsSchemasInIndexDefinitions", new Class[] {});
  public boolean supportsSchemasInIndexDefinitions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m146, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSchemasInPrivilegeDefinitions() throws java.sql.SQLException */
  private static final Method m147 = getMethod(java.sql.DatabaseMetaData.class, "supportsSchemasInPrivilegeDefinitions", new Class[] {});
  public boolean supportsSchemasInPrivilegeDefinitions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m147, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSchemasInProcedureCalls() throws java.sql.SQLException */
  private static final Method m148 = getMethod(java.sql.DatabaseMetaData.class, "supportsSchemasInProcedureCalls", new Class[] {});
  public boolean supportsSchemasInProcedureCalls() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m148, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSchemasInTableDefinitions() throws java.sql.SQLException */
  private static final Method m149 = getMethod(java.sql.DatabaseMetaData.class, "supportsSchemasInTableDefinitions", new Class[] {});
  public boolean supportsSchemasInTableDefinitions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m149, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSelectForUpdate() throws java.sql.SQLException */
  private static final Method m150 = getMethod(java.sql.DatabaseMetaData.class, "supportsSelectForUpdate", new Class[] {});
  public boolean supportsSelectForUpdate() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m150, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsStatementPooling() throws java.sql.SQLException */
  private static final Method m151 = getMethod(java.sql.DatabaseMetaData.class, "supportsStatementPooling", new Class[] {});
  public boolean supportsStatementPooling() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m151, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsStoredProcedures() throws java.sql.SQLException */
  private static final Method m152 = getMethod(java.sql.DatabaseMetaData.class, "supportsStoredProcedures", new Class[] {});
  public boolean supportsStoredProcedures() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m152, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSubqueriesInComparisons() throws java.sql.SQLException */
  private static final Method m153 = getMethod(java.sql.DatabaseMetaData.class, "supportsSubqueriesInComparisons", new Class[] {});
  public boolean supportsSubqueriesInComparisons() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m153, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSubqueriesInExists() throws java.sql.SQLException */
  private static final Method m154 = getMethod(java.sql.DatabaseMetaData.class, "supportsSubqueriesInExists", new Class[] {});
  public boolean supportsSubqueriesInExists() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m154, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSubqueriesInIns() throws java.sql.SQLException */
  private static final Method m155 = getMethod(java.sql.DatabaseMetaData.class, "supportsSubqueriesInIns", new Class[] {});
  public boolean supportsSubqueriesInIns() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m155, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsSubqueriesInQuantifieds() throws java.sql.SQLException */
  private static final Method m156 = getMethod(java.sql.DatabaseMetaData.class, "supportsSubqueriesInQuantifieds", new Class[] {});
  public boolean supportsSubqueriesInQuantifieds() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m156, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsTableCorrelationNames() throws java.sql.SQLException */
  private static final Method m157 = getMethod(java.sql.DatabaseMetaData.class, "supportsTableCorrelationNames", new Class[] {});
  public boolean supportsTableCorrelationNames() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m157, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsTransactionIsolationLevel(int) throws java.sql.SQLException */
  private static final Method m158 = getMethod(java.sql.DatabaseMetaData.class, "supportsTransactionIsolationLevel", new Class[] {int.class});
  public boolean supportsTransactionIsolationLevel(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m158, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsTransactions() throws java.sql.SQLException */
  private static final Method m159 = getMethod(java.sql.DatabaseMetaData.class, "supportsTransactions", new Class[] {});
  public boolean supportsTransactions() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m159, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsUnion() throws java.sql.SQLException */
  private static final Method m160 = getMethod(java.sql.DatabaseMetaData.class, "supportsUnion", new Class[] {});
  public boolean supportsUnion() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m160, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.supportsUnionAll() throws java.sql.SQLException */
  private static final Method m161 = getMethod(java.sql.DatabaseMetaData.class, "supportsUnionAll", new Class[] {});
  public boolean supportsUnionAll() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m161, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.updatesAreDetected(int) throws java.sql.SQLException */
  private static final Method m162 = getMethod(java.sql.DatabaseMetaData.class, "updatesAreDetected", new Class[] {int.class});
  public boolean updatesAreDetected(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m162, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.usesLocalFilePerTable() throws java.sql.SQLException */
  private static final Method m163 = getMethod(java.sql.DatabaseMetaData.class, "usesLocalFilePerTable", new Class[] {});
  public boolean usesLocalFilePerTable() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m163, new Object[] {})).booleanValue();
  }

  /** public abstract boolean java.sql.DatabaseMetaData.usesLocalFiles() throws java.sql.SQLException */
  private static final Method m164 = getMethod(java.sql.DatabaseMetaData.class, "usesLocalFiles", new Class[] {});
  public boolean usesLocalFiles() throws java.sql.SQLException
  {
    return ((Boolean)invoke(m164, new Object[] {})).booleanValue();
  }
}
