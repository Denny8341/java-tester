/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package nl.griffelservices.proxy.jdbc.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.Clob */
public class ClobProxy extends JdbcProxy implements java.sql.Clob
{
  /**
   * Constructs a new ClobProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public ClobProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.Clob.class, proxyObject);
  }

  /** public abstract long java.sql.Clob.length() throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.Clob.class, "length", new Class[] {});
  public long length() throws java.sql.SQLException
  {
    return ((Long)invoke(m0, new Object[] {})).longValue();
  }

  /** public abstract long java.sql.Clob.position(java.sql.Clob,long) throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.Clob.class, "position", new Class[] {java.sql.Clob.class, long.class});
  public long position(java.sql.Clob p0, long p1) throws java.sql.SQLException
  {
    return ((Long)invoke(m1, new Object[] {p0, new Long(p1)})).longValue();
  }

  /** public abstract long java.sql.Clob.position(java.lang.String,long) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.Clob.class, "position", new Class[] {java.lang.String.class, long.class});
  public long position(java.lang.String p0, long p1) throws java.sql.SQLException
  {
    return ((Long)invoke(m2, new Object[] {p0, new Long(p1)})).longValue();
  }

  /** public abstract void java.sql.Clob.truncate(long) throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.Clob.class, "truncate", new Class[] {long.class});
  public void truncate(long p0) throws java.sql.SQLException
  {
    invoke(m3, new Object[] {new Long(p0)});
  }

  /** public abstract java.io.OutputStream java.sql.Clob.setAsciiStream(long) throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.Clob.class, "setAsciiStream", new Class[] {long.class});
  public java.io.OutputStream setAsciiStream(long p0) throws java.sql.SQLException
  {
    return (java.io.OutputStream)invoke(m4, new Object[] {new Long(p0)});
  }

  /** public abstract java.io.Writer java.sql.Clob.setCharacterStream(long) throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.Clob.class, "setCharacterStream", new Class[] {long.class});
  public java.io.Writer setCharacterStream(long p0) throws java.sql.SQLException
  {
    return (java.io.Writer)invoke(m5, new Object[] {new Long(p0)});
  }

  /** public abstract int java.sql.Clob.setString(long,java.lang.String) throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.Clob.class, "setString", new Class[] {long.class, java.lang.String.class});
  public int setString(long p0, java.lang.String p1) throws java.sql.SQLException
  {
    return ((Integer)invoke(m6, new Object[] {new Long(p0), p1})).intValue();
  }

  /** public abstract int java.sql.Clob.setString(long,java.lang.String,int,int) throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.Clob.class, "setString", new Class[] {long.class, java.lang.String.class, int.class, int.class});
  public int setString(long p0, java.lang.String p1, int p2, int p3) throws java.sql.SQLException
  {
    return ((Integer)invoke(m7, new Object[] {new Long(p0), p1, new Integer(p2), new Integer(p3)})).intValue();
  }

  /** public abstract java.io.InputStream java.sql.Clob.getAsciiStream() throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.Clob.class, "getAsciiStream", new Class[] {});
  public java.io.InputStream getAsciiStream() throws java.sql.SQLException
  {
    return (java.io.InputStream)invoke(m8, new Object[] {});
  }

  /** public abstract java.io.Reader java.sql.Clob.getCharacterStream() throws java.sql.SQLException */
  private static final Method m9 = getMethod(java.sql.Clob.class, "getCharacterStream", new Class[] {});
  public java.io.Reader getCharacterStream() throws java.sql.SQLException
  {
    return (java.io.Reader)invoke(m9, new Object[] {});
  }

  /** public abstract java.lang.String java.sql.Clob.getSubString(long,int) throws java.sql.SQLException */
  private static final Method m10 = getMethod(java.sql.Clob.class, "getSubString", new Class[] {long.class, int.class});
  public java.lang.String getSubString(long p0, int p1) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m10, new Object[] {new Long(p0), new Integer(p1)});
  }
}
