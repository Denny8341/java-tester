/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package org.jtester.jdbcproxy.proxy.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.SQLData */
public class SQLDataProxy extends JdbcProxy implements java.sql.SQLData
{
  /**
   * Constructs a new SQLDataProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public SQLDataProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.SQLData.class, proxyObject);
  }

  /** public abstract java.lang.String java.sql.SQLData.getSQLTypeName() throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.SQLData.class, "getSQLTypeName", new Class[] {});
  public java.lang.String getSQLTypeName() throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m0, new Object[] {});
  }

  /** public abstract void java.sql.SQLData.readSQL(java.sql.SQLInput,java.lang.String) throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.SQLData.class, "readSQL", new Class[] {java.sql.SQLInput.class, java.lang.String.class});
  public void readSQL(java.sql.SQLInput p0, java.lang.String p1) throws java.sql.SQLException
  {
    invoke(m1, new Object[] {p0, p1});
  }

  /** public abstract void java.sql.SQLData.writeSQL(java.sql.SQLOutput) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.SQLData.class, "writeSQL", new Class[] {java.sql.SQLOutput.class});
  public void writeSQL(java.sql.SQLOutput p0) throws java.sql.SQLException
  {
    invoke(m2, new Object[] {p0});
  }
}
