/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package org.jtester.jdbcproxy.proxy.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.SQLOutput */
public class SQLOutputProxy extends JdbcProxy implements java.sql.SQLOutput
{
  /**
   * Constructs a new SQLOutputProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public SQLOutputProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.SQLOutput.class, proxyObject);
  }

  /** public abstract void java.sql.SQLOutput.writeObject(java.sql.SQLData) throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.SQLOutput.class, "writeObject", new Class[] {java.sql.SQLData.class});
  public void writeObject(java.sql.SQLData p0) throws java.sql.SQLException
  {
    invoke(m0, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeInt(int) throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.SQLOutput.class, "writeInt", new Class[] {int.class});
  public void writeInt(int p0) throws java.sql.SQLException
  {
    invoke(m1, new Object[] {new Integer(p0)});
  }

  /** public abstract void java.sql.SQLOutput.writeByte(byte) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.SQLOutput.class, "writeByte", new Class[] {byte.class});
  public void writeByte(byte p0) throws java.sql.SQLException
  {
    invoke(m2, new Object[] {new Byte(p0)});
  }

  /** public abstract void java.sql.SQLOutput.writeLong(long) throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.SQLOutput.class, "writeLong", new Class[] {long.class});
  public void writeLong(long p0) throws java.sql.SQLException
  {
    invoke(m3, new Object[] {new Long(p0)});
  }

  /** public abstract void java.sql.SQLOutput.writeShort(short) throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.SQLOutput.class, "writeShort", new Class[] {short.class});
  public void writeShort(short p0) throws java.sql.SQLException
  {
    invoke(m4, new Object[] {new Short(p0)});
  }

  /** public abstract void java.sql.SQLOutput.writeBytes(byte[]) throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.SQLOutput.class, "writeBytes", new Class[] {byte[].class});
  public void writeBytes(byte[] p0) throws java.sql.SQLException
  {
    invoke(m5, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeFloat(float) throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.SQLOutput.class, "writeFloat", new Class[] {float.class});
  public void writeFloat(float p0) throws java.sql.SQLException
  {
    invoke(m6, new Object[] {new Float(p0)});
  }

  /** public abstract void java.sql.SQLOutput.writeArray(java.sql.Array) throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.SQLOutput.class, "writeArray", new Class[] {java.sql.Array.class});
  public void writeArray(java.sql.Array p0) throws java.sql.SQLException
  {
    invoke(m7, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeAsciiStream(java.io.InputStream) throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.SQLOutput.class, "writeAsciiStream", new Class[] {java.io.InputStream.class});
  public void writeAsciiStream(java.io.InputStream p0) throws java.sql.SQLException
  {
    invoke(m8, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeBigDecimal(java.math.BigDecimal) throws java.sql.SQLException */
  private static final Method m9 = getMethod(java.sql.SQLOutput.class, "writeBigDecimal", new Class[] {java.math.BigDecimal.class});
  public void writeBigDecimal(java.math.BigDecimal p0) throws java.sql.SQLException
  {
    invoke(m9, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeBinaryStream(java.io.InputStream) throws java.sql.SQLException */
  private static final Method m10 = getMethod(java.sql.SQLOutput.class, "writeBinaryStream", new Class[] {java.io.InputStream.class});
  public void writeBinaryStream(java.io.InputStream p0) throws java.sql.SQLException
  {
    invoke(m10, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeBlob(java.sql.Blob) throws java.sql.SQLException */
  private static final Method m11 = getMethod(java.sql.SQLOutput.class, "writeBlob", new Class[] {java.sql.Blob.class});
  public void writeBlob(java.sql.Blob p0) throws java.sql.SQLException
  {
    invoke(m11, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeBoolean(boolean) throws java.sql.SQLException */
  private static final Method m12 = getMethod(java.sql.SQLOutput.class, "writeBoolean", new Class[] {boolean.class});
  public void writeBoolean(boolean p0) throws java.sql.SQLException
  {
    invoke(m12, new Object[] {new Boolean(p0)});
  }

  /** public abstract void java.sql.SQLOutput.writeCharacterStream(java.io.Reader) throws java.sql.SQLException */
  private static final Method m13 = getMethod(java.sql.SQLOutput.class, "writeCharacterStream", new Class[] {java.io.Reader.class});
  public void writeCharacterStream(java.io.Reader p0) throws java.sql.SQLException
  {
    invoke(m13, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeClob(java.sql.Clob) throws java.sql.SQLException */
  private static final Method m14 = getMethod(java.sql.SQLOutput.class, "writeClob", new Class[] {java.sql.Clob.class});
  public void writeClob(java.sql.Clob p0) throws java.sql.SQLException
  {
    invoke(m14, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeDate(java.sql.Date) throws java.sql.SQLException */
  private static final Method m15 = getMethod(java.sql.SQLOutput.class, "writeDate", new Class[] {java.sql.Date.class});
  public void writeDate(java.sql.Date p0) throws java.sql.SQLException
  {
    invoke(m15, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeDouble(double) throws java.sql.SQLException */
  private static final Method m16 = getMethod(java.sql.SQLOutput.class, "writeDouble", new Class[] {double.class});
  public void writeDouble(double p0) throws java.sql.SQLException
  {
    invoke(m16, new Object[] {new Double(p0)});
  }

  /** public abstract void java.sql.SQLOutput.writeRef(java.sql.Ref) throws java.sql.SQLException */
  private static final Method m17 = getMethod(java.sql.SQLOutput.class, "writeRef", new Class[] {java.sql.Ref.class});
  public void writeRef(java.sql.Ref p0) throws java.sql.SQLException
  {
    invoke(m17, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeString(java.lang.String) throws java.sql.SQLException */
  private static final Method m18 = getMethod(java.sql.SQLOutput.class, "writeString", new Class[] {java.lang.String.class});
  public void writeString(java.lang.String p0) throws java.sql.SQLException
  {
    invoke(m18, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeStruct(java.sql.Struct) throws java.sql.SQLException */
  private static final Method m19 = getMethod(java.sql.SQLOutput.class, "writeStruct", new Class[] {java.sql.Struct.class});
  public void writeStruct(java.sql.Struct p0) throws java.sql.SQLException
  {
    invoke(m19, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeTime(java.sql.Time) throws java.sql.SQLException */
  private static final Method m20 = getMethod(java.sql.SQLOutput.class, "writeTime", new Class[] {java.sql.Time.class});
  public void writeTime(java.sql.Time p0) throws java.sql.SQLException
  {
    invoke(m20, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeTimestamp(java.sql.Timestamp) throws java.sql.SQLException */
  private static final Method m21 = getMethod(java.sql.SQLOutput.class, "writeTimestamp", new Class[] {java.sql.Timestamp.class});
  public void writeTimestamp(java.sql.Timestamp p0) throws java.sql.SQLException
  {
    invoke(m21, new Object[] {p0});
  }

  /** public abstract void java.sql.SQLOutput.writeURL(java.net.URL) throws java.sql.SQLException */
  private static final Method m22 = getMethod(java.sql.SQLOutput.class, "writeURL", new Class[] {java.net.URL.class});
  public void writeURL(java.net.URL p0) throws java.sql.SQLException
  {
    invoke(m22, new Object[] {p0});
  }
}
