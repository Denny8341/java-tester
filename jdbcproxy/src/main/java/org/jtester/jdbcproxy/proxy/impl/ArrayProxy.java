/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package org.jtester.jdbcproxy.proxy.impl;

import java.sql.Array;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import nl.griffelservices.proxy.Handler;
import nl.griffelservices.proxy.jdbc.intf.IArrayProxy;

/** This class is a proxy implementation of Array */
public class ArrayProxy extends JdbcProxy implements Array, IArrayProxy {
	/**
	 * Constructs a new ArrayProxy object.
	 * 
	 * @param handler
	 *            the proxy handler
	 * @param proxyObject
	 *            the proxy data
	 */
	public ArrayProxy(Handler handler, Object proxyObject) {
		super(handler, Array.class, proxyObject);
	}

	public java.lang.Object getArray() throws SQLException {
		return (java.lang.Object) invoke(m0_getArray, new Object[] {});
	}

	public java.lang.Object getArray(long p0, int p1) throws SQLException {
		return (java.lang.Object) invoke(m1_getArray, new Object[] { new Long(p0), new Integer(p1) });
	}

	public Object getArray(long p0, int p1, Map<String, Class<?>> map) throws SQLException {
		return (Object) invoke(m2_getArray, new Object[] { new Long(p0), new Integer(p1), map });
	}

	public Object getArray(Map<String, Class<?>> map) throws SQLException {
		return (Object) invoke(m3_getArray, new Object[] { map });
	}

	public int getBaseType() throws SQLException {
		return ((Integer) invoke(m4_getBaseType, new Object[] {})).intValue();
	}

	public java.lang.String getBaseTypeName() throws SQLException {
		return (java.lang.String) invoke(m5_getBaseTypeName, new Object[] {});
	}

	public ResultSet getResultSet() throws SQLException {
		return (ResultSet) invoke(m6_getResultSet, new Object[] {});
	}

	public ResultSet getResultSet(long p0, int p1) throws SQLException {
		return (ResultSet) invoke(m7_getResultSet, new Object[] { new Long(p0), new Integer(p1) });
	}

	public ResultSet getResultSet(long p0, int p1, Map<String, Class<?>> map) throws SQLException {
		return (ResultSet) invoke(m8_getResultSet, new Object[] { new Long(p0), new Integer(p1), map });
	}

	public ResultSet getResultSet(Map<String, Class<?>> map) throws SQLException {
		return (ResultSet) invoke(m9_getResultSet, new Object[] { map });
	}
}
