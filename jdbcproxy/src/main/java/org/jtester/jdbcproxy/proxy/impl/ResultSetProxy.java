/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package org.jtester.jdbcproxy.proxy.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.ResultSet */
@SuppressWarnings("unchecked")
public class ResultSetProxy extends JdbcProxy implements java.sql.ResultSet {
	/**
	 * Constructs a new ResultSetProxy object.
	 * 
	 * @param handler
	 *            the proxy handler
	 * @param proxyObject
	 *            the proxy data
	 */
	public ResultSetProxy(Handler handler, Object proxyObject) {
		super(handler, java.sql.ResultSet.class, proxyObject);
	}

	/**
	 * public abstract java.lang.Object
	 * java.sql.ResultSet.getObject(java.lang.String,java.util.Map) throws
	 * java.sql.SQLException
	 */
	private static final Method m0 = getMethod(java.sql.ResultSet.class, "getObject", new Class[] {
			java.lang.String.class, java.util.Map.class });

	public java.lang.Object getObject(java.lang.String p0, java.util.Map p1) throws java.sql.SQLException {
		return (java.lang.Object) invoke(m0, new Object[] { p0, p1 });
	}

	/**
	 * public abstract java.lang.Object
	 * java.sql.ResultSet.getObject(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m1 = getMethod(java.sql.ResultSet.class, "getObject",
			new Class[] { java.lang.String.class });

	public java.lang.Object getObject(java.lang.String p0) throws java.sql.SQLException {
		return (java.lang.Object) invoke(m1, new Object[] { p0 });
	}

	/**
	 * public abstract java.lang.Object java.sql.ResultSet.getObject(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m2 = getMethod(java.sql.ResultSet.class, "getObject", new Class[] { int.class });

	public java.lang.Object getObject(int p0) throws java.sql.SQLException {
		return (java.lang.Object) invoke(m2, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.lang.Object
	 * java.sql.ResultSet.getObject(int,java.util.Map) throws
	 * java.sql.SQLException
	 */
	private static final Method m3 = getMethod(java.sql.ResultSet.class, "getObject", new Class[] { int.class,
			java.util.Map.class });

	public java.lang.Object getObject(int p0, java.util.Map p1) throws java.sql.SQLException {
		return (java.lang.Object) invoke(m3, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract boolean java.sql.ResultSet.getBoolean(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m4 = getMethod(java.sql.ResultSet.class, "getBoolean", new Class[] { int.class });

	public boolean getBoolean(int p0) throws java.sql.SQLException {
		return ((Boolean) invoke(m4, new Object[] { new Integer(p0) })).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.getBoolean(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m5 = getMethod(java.sql.ResultSet.class, "getBoolean",
			new Class[] { java.lang.String.class });

	public boolean getBoolean(java.lang.String p0) throws java.sql.SQLException {
		return ((Boolean) invoke(m5, new Object[] { p0 })).booleanValue();
	}

	/**
	 * public abstract byte java.sql.ResultSet.getByte(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m6 = getMethod(java.sql.ResultSet.class, "getByte", new Class[] { int.class });

	public byte getByte(int p0) throws java.sql.SQLException {
		return ((Byte) invoke(m6, new Object[] { new Integer(p0) })).byteValue();
	}

	/**
	 * public abstract byte java.sql.ResultSet.getByte(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m7 = getMethod(java.sql.ResultSet.class, "getByte",
			new Class[] { java.lang.String.class });

	public byte getByte(java.lang.String p0) throws java.sql.SQLException {
		return ((Byte) invoke(m7, new Object[] { p0 })).byteValue();
	}

	/**
	 * public abstract short java.sql.ResultSet.getShort(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m8 = getMethod(java.sql.ResultSet.class, "getShort",
			new Class[] { java.lang.String.class });

	public short getShort(java.lang.String p0) throws java.sql.SQLException {
		return ((Short) invoke(m8, new Object[] { p0 })).shortValue();
	}

	/**
	 * public abstract short java.sql.ResultSet.getShort(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m9 = getMethod(java.sql.ResultSet.class, "getShort", new Class[] { int.class });

	public short getShort(int p0) throws java.sql.SQLException {
		return ((Short) invoke(m9, new Object[] { new Integer(p0) })).shortValue();
	}

	/**
	 * public abstract int java.sql.ResultSet.getInt(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m10 = getMethod(java.sql.ResultSet.class, "getInt", new Class[] { int.class });

	public int getInt(int p0) throws java.sql.SQLException {
		return ((Integer) invoke(m10, new Object[] { new Integer(p0) })).intValue();
	}

	/**
	 * public abstract int java.sql.ResultSet.getInt(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m11 = getMethod(java.sql.ResultSet.class, "getInt",
			new Class[] { java.lang.String.class });

	public int getInt(java.lang.String p0) throws java.sql.SQLException {
		return ((Integer) invoke(m11, new Object[] { p0 })).intValue();
	}

	/**
	 * public abstract long java.sql.ResultSet.getLong(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m12 = getMethod(java.sql.ResultSet.class, "getLong", new Class[] { int.class });

	public long getLong(int p0) throws java.sql.SQLException {
		return ((Long) invoke(m12, new Object[] { new Integer(p0) })).longValue();
	}

	/**
	 * public abstract long java.sql.ResultSet.getLong(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m13 = getMethod(java.sql.ResultSet.class, "getLong",
			new Class[] { java.lang.String.class });

	public long getLong(java.lang.String p0) throws java.sql.SQLException {
		return ((Long) invoke(m13, new Object[] { p0 })).longValue();
	}

	/**
	 * public abstract float java.sql.ResultSet.getFloat(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m14 = getMethod(java.sql.ResultSet.class, "getFloat", new Class[] { int.class });

	public float getFloat(int p0) throws java.sql.SQLException {
		return ((Float) invoke(m14, new Object[] { new Integer(p0) })).floatValue();
	}

	/**
	 * public abstract float java.sql.ResultSet.getFloat(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m15 = getMethod(java.sql.ResultSet.class, "getFloat",
			new Class[] { java.lang.String.class });

	public float getFloat(java.lang.String p0) throws java.sql.SQLException {
		return ((Float) invoke(m15, new Object[] { p0 })).floatValue();
	}

	/**
	 * public abstract double java.sql.ResultSet.getDouble(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m16 = getMethod(java.sql.ResultSet.class, "getDouble", new Class[] { int.class });

	public double getDouble(int p0) throws java.sql.SQLException {
		return ((Double) invoke(m16, new Object[] { new Integer(p0) })).doubleValue();
	}

	/**
	 * public abstract double java.sql.ResultSet.getDouble(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m17 = getMethod(java.sql.ResultSet.class, "getDouble",
			new Class[] { java.lang.String.class });

	public double getDouble(java.lang.String p0) throws java.sql.SQLException {
		return ((Double) invoke(m17, new Object[] { p0 })).doubleValue();
	}

	/**
	 * public abstract byte[] java.sql.ResultSet.getBytes(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m18 = getMethod(java.sql.ResultSet.class, "getBytes",
			new Class[] { java.lang.String.class });

	public byte[] getBytes(java.lang.String p0) throws java.sql.SQLException {
		return (byte[]) invoke(m18, new Object[] { p0 });
	}

	/**
	 * public abstract byte[] java.sql.ResultSet.getBytes(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m19 = getMethod(java.sql.ResultSet.class, "getBytes", new Class[] { int.class });

	public byte[] getBytes(int p0) throws java.sql.SQLException {
		return (byte[]) invoke(m19, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Array java.sql.ResultSet.getArray(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m20 = getMethod(java.sql.ResultSet.class, "getArray", new Class[] { int.class });

	public java.sql.Array getArray(int p0) throws java.sql.SQLException {
		return (java.sql.Array) invoke(m20, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Array
	 * java.sql.ResultSet.getArray(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m21 = getMethod(java.sql.ResultSet.class, "getArray",
			new Class[] { java.lang.String.class });

	public java.sql.Array getArray(java.lang.String p0) throws java.sql.SQLException {
		return (java.sql.Array) invoke(m21, new Object[] { p0 });
	}

	/**
	 * public abstract java.net.URL java.sql.ResultSet.getURL(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m22 = getMethod(java.sql.ResultSet.class, "getURL",
			new Class[] { java.lang.String.class });

	public java.net.URL getURL(java.lang.String p0) throws java.sql.SQLException {
		return (java.net.URL) invoke(m22, new Object[] { p0 });
	}

	/**
	 * public abstract java.net.URL java.sql.ResultSet.getURL(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m23 = getMethod(java.sql.ResultSet.class, "getURL", new Class[] { int.class });

	public java.net.URL getURL(int p0) throws java.sql.SQLException {
		return (java.net.URL) invoke(m23, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract boolean java.sql.ResultSet.next() throws
	 * java.sql.SQLException
	 */
	private static final Method m24 = getMethod(java.sql.ResultSet.class, "next", new Class[] {});

	public boolean next() throws java.sql.SQLException {
		return ((Boolean) invoke(m24, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract int java.sql.ResultSet.getType() throws
	 * java.sql.SQLException
	 */
	private static final Method m25 = getMethod(java.sql.ResultSet.class, "getType", new Class[] {});

	public int getType() throws java.sql.SQLException {
		return ((Integer) invoke(m25, new Object[] {})).intValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.previous() throws
	 * java.sql.SQLException
	 */
	private static final Method m26 = getMethod(java.sql.ResultSet.class, "previous", new Class[] {});

	public boolean previous() throws java.sql.SQLException {
		return ((Boolean) invoke(m26, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract void java.sql.ResultSet.close() throws
	 * java.sql.SQLException
	 */
	private static final Method m27 = getMethod(java.sql.ResultSet.class, "close", new Class[] {});

	public void close() throws java.sql.SQLException {
		invoke(m27, new Object[] {});
	}

	/**
	 * public abstract java.sql.Ref java.sql.ResultSet.getRef(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m28 = getMethod(java.sql.ResultSet.class, "getRef",
			new Class[] { java.lang.String.class });

	public java.sql.Ref getRef(java.lang.String p0) throws java.sql.SQLException {
		return (java.sql.Ref) invoke(m28, new Object[] { p0 });
	}

	/**
	 * public abstract java.sql.Ref java.sql.ResultSet.getRef(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m29 = getMethod(java.sql.ResultSet.class, "getRef", new Class[] { int.class });

	public java.sql.Ref getRef(int p0) throws java.sql.SQLException {
		return (java.sql.Ref) invoke(m29, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Date java.sql.ResultSet.getDate(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m30 = getMethod(java.sql.ResultSet.class, "getDate", new Class[] { int.class });

	public java.sql.Date getDate(int p0) throws java.sql.SQLException {
		return (java.sql.Date) invoke(m30, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Date
	 * java.sql.ResultSet.getDate(int,java.util.Calendar) throws
	 * java.sql.SQLException
	 */
	private static final Method m31 = getMethod(java.sql.ResultSet.class, "getDate", new Class[] { int.class,
			java.util.Calendar.class });

	public java.sql.Date getDate(int p0, java.util.Calendar p1) throws java.sql.SQLException {
		return (java.sql.Date) invoke(m31, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract java.sql.Date
	 * java.sql.ResultSet.getDate(java.lang.String,java.util.Calendar) throws
	 * java.sql.SQLException
	 */
	private static final Method m32 = getMethod(java.sql.ResultSet.class, "getDate", new Class[] {
			java.lang.String.class, java.util.Calendar.class });

	public java.sql.Date getDate(java.lang.String p0, java.util.Calendar p1) throws java.sql.SQLException {
		return (java.sql.Date) invoke(m32, new Object[] { p0, p1 });
	}

	/**
	 * public abstract java.sql.Date
	 * java.sql.ResultSet.getDate(java.lang.String) throws java.sql.SQLException
	 */
	private static final Method m33 = getMethod(java.sql.ResultSet.class, "getDate",
			new Class[] { java.lang.String.class });

	public java.sql.Date getDate(java.lang.String p0) throws java.sql.SQLException {
		return (java.sql.Date) invoke(m33, new Object[] { p0 });
	}

	/**
	 * public abstract java.io.InputStream
	 * java.sql.ResultSet.getBinaryStream(int) throws java.sql.SQLException
	 */
	private static final Method m34 = getMethod(java.sql.ResultSet.class, "getBinaryStream", new Class[] { int.class });

	public java.io.InputStream getBinaryStream(int p0) throws java.sql.SQLException {
		return (java.io.InputStream) invoke(m34, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.io.InputStream
	 * java.sql.ResultSet.getBinaryStream(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m35 = getMethod(java.sql.ResultSet.class, "getBinaryStream",
			new Class[] { java.lang.String.class });

	public java.io.InputStream getBinaryStream(java.lang.String p0) throws java.sql.SQLException {
		return (java.io.InputStream) invoke(m35, new Object[] { p0 });
	}

	/**
	 * public abstract java.math.BigDecimal
	 * java.sql.ResultSet.getBigDecimal(int,int) throws java.sql.SQLException
	 */
	private static final Method m36 = getMethod(java.sql.ResultSet.class, "getBigDecimal", new Class[] { int.class,
			int.class });

	public java.math.BigDecimal getBigDecimal(int p0, int p1) throws java.sql.SQLException {
		return (java.math.BigDecimal) invoke(m36, new Object[] { new Integer(p0), new Integer(p1) });
	}

	/**
	 * public abstract java.math.BigDecimal
	 * java.sql.ResultSet.getBigDecimal(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m37 = getMethod(java.sql.ResultSet.class, "getBigDecimal",
			new Class[] { java.lang.String.class });

	public java.math.BigDecimal getBigDecimal(java.lang.String p0) throws java.sql.SQLException {
		return (java.math.BigDecimal) invoke(m37, new Object[] { p0 });
	}

	/**
	 * public abstract java.math.BigDecimal
	 * java.sql.ResultSet.getBigDecimal(java.lang.String,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m38 = getMethod(java.sql.ResultSet.class, "getBigDecimal", new Class[] {
			java.lang.String.class, int.class });

	public java.math.BigDecimal getBigDecimal(java.lang.String p0, int p1) throws java.sql.SQLException {
		return (java.math.BigDecimal) invoke(m38, new Object[] { p0, new Integer(p1) });
	}

	/**
	 * public abstract java.math.BigDecimal
	 * java.sql.ResultSet.getBigDecimal(int) throws java.sql.SQLException
	 */
	private static final Method m39 = getMethod(java.sql.ResultSet.class, "getBigDecimal", new Class[] { int.class });

	public java.math.BigDecimal getBigDecimal(int p0) throws java.sql.SQLException {
		return (java.math.BigDecimal) invoke(m39, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Blob
	 * java.sql.ResultSet.getBlob(java.lang.String) throws java.sql.SQLException
	 */
	private static final Method m40 = getMethod(java.sql.ResultSet.class, "getBlob",
			new Class[] { java.lang.String.class });

	public java.sql.Blob getBlob(java.lang.String p0) throws java.sql.SQLException {
		return (java.sql.Blob) invoke(m40, new Object[] { p0 });
	}

	/**
	 * public abstract java.sql.Blob java.sql.ResultSet.getBlob(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m41 = getMethod(java.sql.ResultSet.class, "getBlob", new Class[] { int.class });

	public java.sql.Blob getBlob(int p0) throws java.sql.SQLException {
		return (java.sql.Blob) invoke(m41, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Clob
	 * java.sql.ResultSet.getClob(java.lang.String) throws java.sql.SQLException
	 */
	private static final Method m42 = getMethod(java.sql.ResultSet.class, "getClob",
			new Class[] { java.lang.String.class });

	public java.sql.Clob getClob(java.lang.String p0) throws java.sql.SQLException {
		return (java.sql.Clob) invoke(m42, new Object[] { p0 });
	}

	/**
	 * public abstract java.sql.Clob java.sql.ResultSet.getClob(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m43 = getMethod(java.sql.ResultSet.class, "getClob", new Class[] { int.class });

	public java.sql.Clob getClob(int p0) throws java.sql.SQLException {
		return (java.sql.Clob) invoke(m43, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.lang.String java.sql.ResultSet.getString(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m44 = getMethod(java.sql.ResultSet.class, "getString", new Class[] { int.class });

	public java.lang.String getString(int p0) throws java.sql.SQLException {
		return (java.lang.String) invoke(m44, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.lang.String
	 * java.sql.ResultSet.getString(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m45 = getMethod(java.sql.ResultSet.class, "getString",
			new Class[] { java.lang.String.class });

	public java.lang.String getString(java.lang.String p0) throws java.sql.SQLException {
		return (java.lang.String) invoke(m45, new Object[] { p0 });
	}

	/**
	 * public abstract java.sql.Time
	 * java.sql.ResultSet.getTime(java.lang.String) throws java.sql.SQLException
	 */
	private static final Method m46 = getMethod(java.sql.ResultSet.class, "getTime",
			new Class[] { java.lang.String.class });

	public java.sql.Time getTime(java.lang.String p0) throws java.sql.SQLException {
		return (java.sql.Time) invoke(m46, new Object[] { p0 });
	}

	/**
	 * public abstract java.sql.Time java.sql.ResultSet.getTime(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m47 = getMethod(java.sql.ResultSet.class, "getTime", new Class[] { int.class });

	public java.sql.Time getTime(int p0) throws java.sql.SQLException {
		return (java.sql.Time) invoke(m47, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Time
	 * java.sql.ResultSet.getTime(int,java.util.Calendar) throws
	 * java.sql.SQLException
	 */
	private static final Method m48 = getMethod(java.sql.ResultSet.class, "getTime", new Class[] { int.class,
			java.util.Calendar.class });

	public java.sql.Time getTime(int p0, java.util.Calendar p1) throws java.sql.SQLException {
		return (java.sql.Time) invoke(m48, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract java.sql.Time
	 * java.sql.ResultSet.getTime(java.lang.String,java.util.Calendar) throws
	 * java.sql.SQLException
	 */
	private static final Method m49 = getMethod(java.sql.ResultSet.class, "getTime", new Class[] {
			java.lang.String.class, java.util.Calendar.class });

	public java.sql.Time getTime(java.lang.String p0, java.util.Calendar p1) throws java.sql.SQLException {
		return (java.sql.Time) invoke(m49, new Object[] { p0, p1 });
	}

	/**
	 * public abstract java.sql.Timestamp
	 * java.sql.ResultSet.getTimestamp(java.lang.String,java.util.Calendar)
	 * throws java.sql.SQLException
	 */
	private static final Method m50 = getMethod(java.sql.ResultSet.class, "getTimestamp", new Class[] {
			java.lang.String.class, java.util.Calendar.class });

	public java.sql.Timestamp getTimestamp(java.lang.String p0, java.util.Calendar p1) throws java.sql.SQLException {
		return (java.sql.Timestamp) invoke(m50, new Object[] { p0, p1 });
	}

	/**
	 * public abstract java.sql.Timestamp
	 * java.sql.ResultSet.getTimestamp(int,java.util.Calendar) throws
	 * java.sql.SQLException
	 */
	private static final Method m51 = getMethod(java.sql.ResultSet.class, "getTimestamp", new Class[] { int.class,
			java.util.Calendar.class });

	public java.sql.Timestamp getTimestamp(int p0, java.util.Calendar p1) throws java.sql.SQLException {
		return (java.sql.Timestamp) invoke(m51, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract java.sql.Timestamp java.sql.ResultSet.getTimestamp(int)
	 * throws java.sql.SQLException
	 */
	private static final Method m52 = getMethod(java.sql.ResultSet.class, "getTimestamp", new Class[] { int.class });

	public java.sql.Timestamp getTimestamp(int p0) throws java.sql.SQLException {
		return (java.sql.Timestamp) invoke(m52, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.sql.Timestamp
	 * java.sql.ResultSet.getTimestamp(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m53 = getMethod(java.sql.ResultSet.class, "getTimestamp",
			new Class[] { java.lang.String.class });

	public java.sql.Timestamp getTimestamp(java.lang.String p0) throws java.sql.SQLException {
		return (java.sql.Timestamp) invoke(m53, new Object[] { p0 });
	}

	/**
	 * public abstract boolean java.sql.ResultSet.wasNull() throws
	 * java.sql.SQLException
	 */
	private static final Method m54 = getMethod(java.sql.ResultSet.class, "wasNull", new Class[] {});

	public boolean wasNull() throws java.sql.SQLException {
		return ((Boolean) invoke(m54, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract java.sql.ResultSetMetaData
	 * java.sql.ResultSet.getMetaData() throws java.sql.SQLException
	 */
	private static final Method m55 = getMethod(java.sql.ResultSet.class, "getMetaData", new Class[] {});

	public java.sql.ResultSetMetaData getMetaData() throws java.sql.SQLException {
		return (java.sql.ResultSetMetaData) invoke(m55, new Object[] {});
	}

	/**
	 * public abstract void java.sql.ResultSet.clearWarnings() throws
	 * java.sql.SQLException
	 */
	private static final Method m56 = getMethod(java.sql.ResultSet.class, "clearWarnings", new Class[] {});

	public void clearWarnings() throws java.sql.SQLException {
		invoke(m56, new Object[] {});
	}

	/**
	 * public abstract int java.sql.ResultSet.getFetchDirection() throws
	 * java.sql.SQLException
	 */
	private static final Method m57 = getMethod(java.sql.ResultSet.class, "getFetchDirection", new Class[] {});

	public int getFetchDirection() throws java.sql.SQLException {
		return ((Integer) invoke(m57, new Object[] {})).intValue();
	}

	/**
	 * public abstract int java.sql.ResultSet.getFetchSize() throws
	 * java.sql.SQLException
	 */
	private static final Method m58 = getMethod(java.sql.ResultSet.class, "getFetchSize", new Class[] {});

	public int getFetchSize() throws java.sql.SQLException {
		return ((Integer) invoke(m58, new Object[] {})).intValue();
	}

	/**
	 * public abstract java.sql.SQLWarning java.sql.ResultSet.getWarnings()
	 * throws java.sql.SQLException
	 */
	private static final Method m59 = getMethod(java.sql.ResultSet.class, "getWarnings", new Class[] {});

	public java.sql.SQLWarning getWarnings() throws java.sql.SQLException {
		return (java.sql.SQLWarning) invoke(m59, new Object[] {});
	}

	/**
	 * public abstract void java.sql.ResultSet.setFetchDirection(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m60 = getMethod(java.sql.ResultSet.class, "setFetchDirection",
			new Class[] { int.class });

	public void setFetchDirection(int p0) throws java.sql.SQLException {
		invoke(m60, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract void java.sql.ResultSet.setFetchSize(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m61 = getMethod(java.sql.ResultSet.class, "setFetchSize", new Class[] { int.class });

	public void setFetchSize(int p0) throws java.sql.SQLException {
		invoke(m61, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.io.InputStream
	 * java.sql.ResultSet.getAsciiStream(int) throws java.sql.SQLException
	 */
	private static final Method m62 = getMethod(java.sql.ResultSet.class, "getAsciiStream", new Class[] { int.class });

	public java.io.InputStream getAsciiStream(int p0) throws java.sql.SQLException {
		return (java.io.InputStream) invoke(m62, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.io.InputStream
	 * java.sql.ResultSet.getAsciiStream(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m63 = getMethod(java.sql.ResultSet.class, "getAsciiStream",
			new Class[] { java.lang.String.class });

	public java.io.InputStream getAsciiStream(java.lang.String p0) throws java.sql.SQLException {
		return (java.io.InputStream) invoke(m63, new Object[] { p0 });
	}

	/**
	 * public abstract java.io.Reader java.sql.ResultSet.getCharacterStream(int)
	 * throws java.sql.SQLException
	 */
	private static final Method m64 = getMethod(java.sql.ResultSet.class, "getCharacterStream",
			new Class[] { int.class });

	public java.io.Reader getCharacterStream(int p0) throws java.sql.SQLException {
		return (java.io.Reader) invoke(m64, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.io.Reader
	 * java.sql.ResultSet.getCharacterStream(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m65 = getMethod(java.sql.ResultSet.class, "getCharacterStream",
			new Class[] { java.lang.String.class });

	public java.io.Reader getCharacterStream(java.lang.String p0) throws java.sql.SQLException {
		return (java.io.Reader) invoke(m65, new Object[] { p0 });
	}

	/**
	 * public abstract boolean java.sql.ResultSet.absolute(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m66 = getMethod(java.sql.ResultSet.class, "absolute", new Class[] { int.class });

	public boolean absolute(int p0) throws java.sql.SQLException {
		return ((Boolean) invoke(m66, new Object[] { new Integer(p0) })).booleanValue();
	}

	/**
	 * public abstract void java.sql.ResultSet.afterLast() throws
	 * java.sql.SQLException
	 */
	private static final Method m67 = getMethod(java.sql.ResultSet.class, "afterLast", new Class[] {});

	public void afterLast() throws java.sql.SQLException {
		invoke(m67, new Object[] {});
	}

	/**
	 * public abstract void java.sql.ResultSet.beforeFirst() throws
	 * java.sql.SQLException
	 */
	private static final Method m68 = getMethod(java.sql.ResultSet.class, "beforeFirst", new Class[] {});

	public void beforeFirst() throws java.sql.SQLException {
		invoke(m68, new Object[] {});
	}

	/**
	 * public abstract void java.sql.ResultSet.cancelRowUpdates() throws
	 * java.sql.SQLException
	 */
	private static final Method m69 = getMethod(java.sql.ResultSet.class, "cancelRowUpdates", new Class[] {});

	public void cancelRowUpdates() throws java.sql.SQLException {
		invoke(m69, new Object[] {});
	}

	/**
	 * public abstract void java.sql.ResultSet.deleteRow() throws
	 * java.sql.SQLException
	 */
	private static final Method m70 = getMethod(java.sql.ResultSet.class, "deleteRow", new Class[] {});

	public void deleteRow() throws java.sql.SQLException {
		invoke(m70, new Object[] {});
	}

	/**
	 * public abstract int java.sql.ResultSet.findColumn(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m71 = getMethod(java.sql.ResultSet.class, "findColumn",
			new Class[] { java.lang.String.class });

	public int findColumn(java.lang.String p0) throws java.sql.SQLException {
		return ((Integer) invoke(m71, new Object[] { p0 })).intValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.first() throws
	 * java.sql.SQLException
	 */
	private static final Method m72 = getMethod(java.sql.ResultSet.class, "first", new Class[] {});

	public boolean first() throws java.sql.SQLException {
		return ((Boolean) invoke(m72, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract int java.sql.ResultSet.getConcurrency() throws
	 * java.sql.SQLException
	 */
	private static final Method m73 = getMethod(java.sql.ResultSet.class, "getConcurrency", new Class[] {});

	public int getConcurrency() throws java.sql.SQLException {
		return ((Integer) invoke(m73, new Object[] {})).intValue();
	}

	/**
	 * public abstract java.lang.String java.sql.ResultSet.getCursorName()
	 * throws java.sql.SQLException
	 */
	private static final Method m74 = getMethod(java.sql.ResultSet.class, "getCursorName", new Class[] {});

	public java.lang.String getCursorName() throws java.sql.SQLException {
		return (java.lang.String) invoke(m74, new Object[] {});
	}

	/**
	 * public abstract int java.sql.ResultSet.getRow() throws
	 * java.sql.SQLException
	 */
	private static final Method m75 = getMethod(java.sql.ResultSet.class, "getRow", new Class[] {});

	public int getRow() throws java.sql.SQLException {
		return ((Integer) invoke(m75, new Object[] {})).intValue();
	}

	/**
	 * public abstract java.sql.Statement java.sql.ResultSet.getStatement()
	 * throws java.sql.SQLException
	 */
	private static final Method m76 = getMethod(java.sql.ResultSet.class, "getStatement", new Class[] {});

	public java.sql.Statement getStatement() throws java.sql.SQLException {
		return (java.sql.Statement) invoke(m76, new Object[] {});
	}

	/**
	 * public abstract java.io.InputStream
	 * java.sql.ResultSet.getUnicodeStream(int) throws java.sql.SQLException
	 */
	private static final Method m77 = getMethod(java.sql.ResultSet.class, "getUnicodeStream", new Class[] { int.class });

	public java.io.InputStream getUnicodeStream(int p0) throws java.sql.SQLException {
		return (java.io.InputStream) invoke(m77, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract java.io.InputStream
	 * java.sql.ResultSet.getUnicodeStream(java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m78 = getMethod(java.sql.ResultSet.class, "getUnicodeStream",
			new Class[] { java.lang.String.class });

	public java.io.InputStream getUnicodeStream(java.lang.String p0) throws java.sql.SQLException {
		return (java.io.InputStream) invoke(m78, new Object[] { p0 });
	}

	/**
	 * public abstract void java.sql.ResultSet.insertRow() throws
	 * java.sql.SQLException
	 */
	private static final Method m79 = getMethod(java.sql.ResultSet.class, "insertRow", new Class[] {});

	public void insertRow() throws java.sql.SQLException {
		invoke(m79, new Object[] {});
	}

	/**
	 * public abstract boolean java.sql.ResultSet.isAfterLast() throws
	 * java.sql.SQLException
	 */
	private static final Method m80 = getMethod(java.sql.ResultSet.class, "isAfterLast", new Class[] {});

	public boolean isAfterLast() throws java.sql.SQLException {
		return ((Boolean) invoke(m80, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.isBeforeFirst() throws
	 * java.sql.SQLException
	 */
	private static final Method m81 = getMethod(java.sql.ResultSet.class, "isBeforeFirst", new Class[] {});

	public boolean isBeforeFirst() throws java.sql.SQLException {
		return ((Boolean) invoke(m81, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.isFirst() throws
	 * java.sql.SQLException
	 */
	private static final Method m82 = getMethod(java.sql.ResultSet.class, "isFirst", new Class[] {});

	public boolean isFirst() throws java.sql.SQLException {
		return ((Boolean) invoke(m82, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.isLast() throws
	 * java.sql.SQLException
	 */
	private static final Method m83 = getMethod(java.sql.ResultSet.class, "isLast", new Class[] {});

	public boolean isLast() throws java.sql.SQLException {
		return ((Boolean) invoke(m83, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.last() throws
	 * java.sql.SQLException
	 */
	private static final Method m84 = getMethod(java.sql.ResultSet.class, "last", new Class[] {});

	public boolean last() throws java.sql.SQLException {
		return ((Boolean) invoke(m84, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract void java.sql.ResultSet.moveToCurrentRow() throws
	 * java.sql.SQLException
	 */
	private static final Method m85 = getMethod(java.sql.ResultSet.class, "moveToCurrentRow", new Class[] {});

	public void moveToCurrentRow() throws java.sql.SQLException {
		invoke(m85, new Object[] {});
	}

	/**
	 * public abstract void java.sql.ResultSet.moveToInsertRow() throws
	 * java.sql.SQLException
	 */
	private static final Method m86 = getMethod(java.sql.ResultSet.class, "moveToInsertRow", new Class[] {});

	public void moveToInsertRow() throws java.sql.SQLException {
		invoke(m86, new Object[] {});
	}

	/**
	 * public abstract void java.sql.ResultSet.refreshRow() throws
	 * java.sql.SQLException
	 */
	private static final Method m87 = getMethod(java.sql.ResultSet.class, "refreshRow", new Class[] {});

	public void refreshRow() throws java.sql.SQLException {
		invoke(m87, new Object[] {});
	}

	/**
	 * public abstract boolean java.sql.ResultSet.relative(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m88 = getMethod(java.sql.ResultSet.class, "relative", new Class[] { int.class });

	public boolean relative(int p0) throws java.sql.SQLException {
		return ((Boolean) invoke(m88, new Object[] { new Integer(p0) })).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.rowDeleted() throws
	 * java.sql.SQLException
	 */
	private static final Method m89 = getMethod(java.sql.ResultSet.class, "rowDeleted", new Class[] {});

	public boolean rowDeleted() throws java.sql.SQLException {
		return ((Boolean) invoke(m89, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.rowInserted() throws
	 * java.sql.SQLException
	 */
	private static final Method m90 = getMethod(java.sql.ResultSet.class, "rowInserted", new Class[] {});

	public boolean rowInserted() throws java.sql.SQLException {
		return ((Boolean) invoke(m90, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract boolean java.sql.ResultSet.rowUpdated() throws
	 * java.sql.SQLException
	 */
	private static final Method m91 = getMethod(java.sql.ResultSet.class, "rowUpdated", new Class[] {});

	public boolean rowUpdated() throws java.sql.SQLException {
		return ((Boolean) invoke(m91, new Object[] {})).booleanValue();
	}

	/**
	 * public abstract void java.sql.ResultSet.updateArray(int,java.sql.Array)
	 * throws java.sql.SQLException
	 */
	private static final Method m92 = getMethod(java.sql.ResultSet.class, "updateArray", new Class[] { int.class,
			java.sql.Array.class });

	public void updateArray(int p0, java.sql.Array p1) throws java.sql.SQLException {
		invoke(m92, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateArray(java.lang.String,java.sql.Array) throws
	 * java.sql.SQLException
	 */
	private static final Method m93 = getMethod(java.sql.ResultSet.class, "updateArray", new Class[] {
			java.lang.String.class, java.sql.Array.class });

	public void updateArray(java.lang.String p0, java.sql.Array p1) throws java.sql.SQLException {
		invoke(m93, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateAsciiStream(java.lang.String
	 * ,java.io.InputStream,int) throws java.sql.SQLException
	 */
	private static final Method m94 = getMethod(java.sql.ResultSet.class, "updateAsciiStream", new Class[] {
			java.lang.String.class, java.io.InputStream.class, int.class });

	public void updateAsciiStream(java.lang.String p0, java.io.InputStream p1, int p2) throws java.sql.SQLException {
		invoke(m94, new Object[] { p0, p1, new Integer(p2) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateAsciiStream(int,java.io.InputStream,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m95 = getMethod(java.sql.ResultSet.class, "updateAsciiStream", new Class[] { int.class,
			java.io.InputStream.class, int.class });

	public void updateAsciiStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException {
		invoke(m95, new Object[] { new Integer(p0), p1, new Integer(p2) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateBigDecimal(java.lang.String,
	 * java.math.BigDecimal) throws java.sql.SQLException
	 */
	private static final Method m96 = getMethod(java.sql.ResultSet.class, "updateBigDecimal", new Class[] {
			java.lang.String.class, java.math.BigDecimal.class });

	public void updateBigDecimal(java.lang.String p0, java.math.BigDecimal p1) throws java.sql.SQLException {
		invoke(m96, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateBigDecimal(int,java.math.BigDecimal) throws
	 * java.sql.SQLException
	 */
	private static final Method m97 = getMethod(java.sql.ResultSet.class, "updateBigDecimal", new Class[] { int.class,
			java.math.BigDecimal.class });

	public void updateBigDecimal(int p0, java.math.BigDecimal p1) throws java.sql.SQLException {
		invoke(m97, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateBinaryStream(int,java.io.InputStream,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m98 = getMethod(java.sql.ResultSet.class, "updateBinaryStream", new Class[] {
			int.class, java.io.InputStream.class, int.class });

	public void updateBinaryStream(int p0, java.io.InputStream p1, int p2) throws java.sql.SQLException {
		invoke(m98, new Object[] { new Integer(p0), p1, new Integer(p2) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateBinaryStream(java.lang.String
	 * ,java.io.InputStream,int) throws java.sql.SQLException
	 */
	private static final Method m99 = getMethod(java.sql.ResultSet.class, "updateBinaryStream", new Class[] {
			java.lang.String.class, java.io.InputStream.class, int.class });

	public void updateBinaryStream(java.lang.String p0, java.io.InputStream p1, int p2) throws java.sql.SQLException {
		invoke(m99, new Object[] { p0, p1, new Integer(p2) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateBlob(int,java.sql.Blob)
	 * throws java.sql.SQLException
	 */
	private static final Method m100 = getMethod(java.sql.ResultSet.class, "updateBlob", new Class[] { int.class,
			java.sql.Blob.class });

	public void updateBlob(int p0, java.sql.Blob p1) throws java.sql.SQLException {
		invoke(m100, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateBlob(java.lang.String,java.sql.Blob) throws
	 * java.sql.SQLException
	 */
	private static final Method m101 = getMethod(java.sql.ResultSet.class, "updateBlob", new Class[] {
			java.lang.String.class, java.sql.Blob.class });

	public void updateBlob(java.lang.String p0, java.sql.Blob p1) throws java.sql.SQLException {
		invoke(m101, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateBoolean(int,boolean) throws
	 * java.sql.SQLException
	 */
	private static final Method m102 = getMethod(java.sql.ResultSet.class, "updateBoolean", new Class[] { int.class,
			boolean.class });

	public void updateBoolean(int p0, boolean p1) throws java.sql.SQLException {
		invoke(m102, new Object[] { new Integer(p0), new Boolean(p1) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateBoolean(java.lang.String,boolean) throws
	 * java.sql.SQLException
	 */
	private static final Method m103 = getMethod(java.sql.ResultSet.class, "updateBoolean", new Class[] {
			java.lang.String.class, boolean.class });

	public void updateBoolean(java.lang.String p0, boolean p1) throws java.sql.SQLException {
		invoke(m103, new Object[] { p0, new Boolean(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateByte(java.lang.String,byte)
	 * throws java.sql.SQLException
	 */
	private static final Method m104 = getMethod(java.sql.ResultSet.class, "updateByte", new Class[] {
			java.lang.String.class, byte.class });

	public void updateByte(java.lang.String p0, byte p1) throws java.sql.SQLException {
		invoke(m104, new Object[] { p0, new Byte(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateByte(int,byte) throws
	 * java.sql.SQLException
	 */
	private static final Method m105 = getMethod(java.sql.ResultSet.class, "updateByte", new Class[] { int.class,
			byte.class });

	public void updateByte(int p0, byte p1) throws java.sql.SQLException {
		invoke(m105, new Object[] { new Integer(p0), new Byte(p1) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateBytes(java.lang.String,byte[]) throws
	 * java.sql.SQLException
	 */
	private static final Method m106 = getMethod(java.sql.ResultSet.class, "updateBytes", new Class[] {
			java.lang.String.class, byte[].class });

	public void updateBytes(java.lang.String p0, byte[] p1) throws java.sql.SQLException {
		invoke(m106, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateBytes(int,byte[]) throws
	 * java.sql.SQLException
	 */
	private static final Method m107 = getMethod(java.sql.ResultSet.class, "updateBytes", new Class[] { int.class,
			byte[].class });

	public void updateBytes(int p0, byte[] p1) throws java.sql.SQLException {
		invoke(m107, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateCharacterStream(int,java.io.Reader,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m108 = getMethod(java.sql.ResultSet.class, "updateCharacterStream", new Class[] {
			int.class, java.io.Reader.class, int.class });

	public void updateCharacterStream(int p0, java.io.Reader p1, int p2) throws java.sql.SQLException {
		invoke(m108, new Object[] { new Integer(p0), p1, new Integer(p2) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateCharacterStream(java.lang.String
	 * ,java.io.Reader,int) throws java.sql.SQLException
	 */
	private static final Method m109 = getMethod(java.sql.ResultSet.class, "updateCharacterStream", new Class[] {
			java.lang.String.class, java.io.Reader.class, int.class });

	public void updateCharacterStream(java.lang.String p0, java.io.Reader p1, int p2) throws java.sql.SQLException {
		invoke(m109, new Object[] { p0, p1, new Integer(p2) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateClob(java.lang.String,java.sql.Clob) throws
	 * java.sql.SQLException
	 */
	private static final Method m110 = getMethod(java.sql.ResultSet.class, "updateClob", new Class[] {
			java.lang.String.class, java.sql.Clob.class });

	public void updateClob(java.lang.String p0, java.sql.Clob p1) throws java.sql.SQLException {
		invoke(m110, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateClob(int,java.sql.Clob)
	 * throws java.sql.SQLException
	 */
	private static final Method m111 = getMethod(java.sql.ResultSet.class, "updateClob", new Class[] { int.class,
			java.sql.Clob.class });

	public void updateClob(int p0, java.sql.Clob p1) throws java.sql.SQLException {
		invoke(m111, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateDate(int,java.sql.Date)
	 * throws java.sql.SQLException
	 */
	private static final Method m112 = getMethod(java.sql.ResultSet.class, "updateDate", new Class[] { int.class,
			java.sql.Date.class });

	public void updateDate(int p0, java.sql.Date p1) throws java.sql.SQLException {
		invoke(m112, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateDate(java.lang.String,java.sql.Date) throws
	 * java.sql.SQLException
	 */
	private static final Method m113 = getMethod(java.sql.ResultSet.class, "updateDate", new Class[] {
			java.lang.String.class, java.sql.Date.class });

	public void updateDate(java.lang.String p0, java.sql.Date p1) throws java.sql.SQLException {
		invoke(m113, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateDouble(java.lang.String,double) throws
	 * java.sql.SQLException
	 */
	private static final Method m114 = getMethod(java.sql.ResultSet.class, "updateDouble", new Class[] {
			java.lang.String.class, double.class });

	public void updateDouble(java.lang.String p0, double p1) throws java.sql.SQLException {
		invoke(m114, new Object[] { p0, new Double(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateDouble(int,double) throws
	 * java.sql.SQLException
	 */
	private static final Method m115 = getMethod(java.sql.ResultSet.class, "updateDouble", new Class[] { int.class,
			double.class });

	public void updateDouble(int p0, double p1) throws java.sql.SQLException {
		invoke(m115, new Object[] { new Integer(p0), new Double(p1) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateFloat(java.lang.String,float) throws
	 * java.sql.SQLException
	 */
	private static final Method m116 = getMethod(java.sql.ResultSet.class, "updateFloat", new Class[] {
			java.lang.String.class, float.class });

	public void updateFloat(java.lang.String p0, float p1) throws java.sql.SQLException {
		invoke(m116, new Object[] { p0, new Float(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateFloat(int,float) throws
	 * java.sql.SQLException
	 */
	private static final Method m117 = getMethod(java.sql.ResultSet.class, "updateFloat", new Class[] { int.class,
			float.class });

	public void updateFloat(int p0, float p1) throws java.sql.SQLException {
		invoke(m117, new Object[] { new Integer(p0), new Float(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateInt(java.lang.String,int)
	 * throws java.sql.SQLException
	 */
	private static final Method m118 = getMethod(java.sql.ResultSet.class, "updateInt", new Class[] {
			java.lang.String.class, int.class });

	public void updateInt(java.lang.String p0, int p1) throws java.sql.SQLException {
		invoke(m118, new Object[] { p0, new Integer(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateInt(int,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m119 = getMethod(java.sql.ResultSet.class, "updateInt", new Class[] { int.class,
			int.class });

	public void updateInt(int p0, int p1) throws java.sql.SQLException {
		invoke(m119, new Object[] { new Integer(p0), new Integer(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateLong(java.lang.String,long)
	 * throws java.sql.SQLException
	 */
	private static final Method m120 = getMethod(java.sql.ResultSet.class, "updateLong", new Class[] {
			java.lang.String.class, long.class });

	public void updateLong(java.lang.String p0, long p1) throws java.sql.SQLException {
		invoke(m120, new Object[] { p0, new Long(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateLong(int,long) throws
	 * java.sql.SQLException
	 */
	private static final Method m121 = getMethod(java.sql.ResultSet.class, "updateLong", new Class[] { int.class,
			long.class });

	public void updateLong(int p0, long p1) throws java.sql.SQLException {
		invoke(m121, new Object[] { new Integer(p0), new Long(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateNull(int) throws
	 * java.sql.SQLException
	 */
	private static final Method m122 = getMethod(java.sql.ResultSet.class, "updateNull", new Class[] { int.class });

	public void updateNull(int p0) throws java.sql.SQLException {
		invoke(m122, new Object[] { new Integer(p0) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateNull(java.lang.String)
	 * throws java.sql.SQLException
	 */
	private static final Method m123 = getMethod(java.sql.ResultSet.class, "updateNull",
			new Class[] { java.lang.String.class });

	public void updateNull(java.lang.String p0) throws java.sql.SQLException {
		invoke(m123, new Object[] { p0 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object,int)
	 * throws java.sql.SQLException
	 */
	private static final Method m124 = getMethod(java.sql.ResultSet.class, "updateObject", new Class[] {
			java.lang.String.class, java.lang.Object.class, int.class });

	public void updateObject(java.lang.String p0, java.lang.Object p1, int p2) throws java.sql.SQLException {
		invoke(m124, new Object[] { p0, p1, new Integer(p2) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateObject(java.lang.String,java.lang.Object) throws
	 * java.sql.SQLException
	 */
	private static final Method m125 = getMethod(java.sql.ResultSet.class, "updateObject", new Class[] {
			java.lang.String.class, java.lang.Object.class });

	public void updateObject(java.lang.String p0, java.lang.Object p1) throws java.sql.SQLException {
		invoke(m125, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateObject(int,java.lang.Object) throws
	 * java.sql.SQLException
	 */
	private static final Method m126 = getMethod(java.sql.ResultSet.class, "updateObject", new Class[] { int.class,
			java.lang.Object.class });

	public void updateObject(int p0, java.lang.Object p1) throws java.sql.SQLException {
		invoke(m126, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateObject(int,java.lang.Object,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m127 = getMethod(java.sql.ResultSet.class, "updateObject", new Class[] { int.class,
			java.lang.Object.class, int.class });

	public void updateObject(int p0, java.lang.Object p1, int p2) throws java.sql.SQLException {
		invoke(m127, new Object[] { new Integer(p0), p1, new Integer(p2) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateRef(java.lang.String,java.sql.Ref) throws
	 * java.sql.SQLException
	 */
	private static final Method m128 = getMethod(java.sql.ResultSet.class, "updateRef", new Class[] {
			java.lang.String.class, java.sql.Ref.class });

	public void updateRef(java.lang.String p0, java.sql.Ref p1) throws java.sql.SQLException {
		invoke(m128, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateRef(int,java.sql.Ref)
	 * throws java.sql.SQLException
	 */
	private static final Method m129 = getMethod(java.sql.ResultSet.class, "updateRef", new Class[] { int.class,
			java.sql.Ref.class });

	public void updateRef(int p0, java.sql.Ref p1) throws java.sql.SQLException {
		invoke(m129, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateRow() throws
	 * java.sql.SQLException
	 */
	private static final Method m130 = getMethod(java.sql.ResultSet.class, "updateRow", new Class[] {});

	public void updateRow() throws java.sql.SQLException {
		invoke(m130, new Object[] {});
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateShort(java.lang.String,short) throws
	 * java.sql.SQLException
	 */
	private static final Method m131 = getMethod(java.sql.ResultSet.class, "updateShort", new Class[] {
			java.lang.String.class, short.class });

	public void updateShort(java.lang.String p0, short p1) throws java.sql.SQLException {
		invoke(m131, new Object[] { p0, new Short(p1) });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateShort(int,short) throws
	 * java.sql.SQLException
	 */
	private static final Method m132 = getMethod(java.sql.ResultSet.class, "updateShort", new Class[] { int.class,
			short.class });

	public void updateShort(int p0, short p1) throws java.sql.SQLException {
		invoke(m132, new Object[] { new Integer(p0), new Short(p1) });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateString(java.lang.String,java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m133 = getMethod(java.sql.ResultSet.class, "updateString", new Class[] {
			java.lang.String.class, java.lang.String.class });

	public void updateString(java.lang.String p0, java.lang.String p1) throws java.sql.SQLException {
		invoke(m133, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateString(int,java.lang.String) throws
	 * java.sql.SQLException
	 */
	private static final Method m134 = getMethod(java.sql.ResultSet.class, "updateString", new Class[] { int.class,
			java.lang.String.class });

	public void updateString(int p0, java.lang.String p1) throws java.sql.SQLException {
		invoke(m134, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateTime(java.lang.String,java.sql.Time) throws
	 * java.sql.SQLException
	 */
	private static final Method m135 = getMethod(java.sql.ResultSet.class, "updateTime", new Class[] {
			java.lang.String.class, java.sql.Time.class });

	public void updateTime(java.lang.String p0, java.sql.Time p1) throws java.sql.SQLException {
		invoke(m135, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void java.sql.ResultSet.updateTime(int,java.sql.Time)
	 * throws java.sql.SQLException
	 */
	private static final Method m136 = getMethod(java.sql.ResultSet.class, "updateTime", new Class[] { int.class,
			java.sql.Time.class });

	public void updateTime(int p0, java.sql.Time p1) throws java.sql.SQLException {
		invoke(m136, new Object[] { new Integer(p0), p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateTimestamp(java.lang.String,java.sql.Timestamp)
	 * throws java.sql.SQLException
	 */
	private static final Method m137 = getMethod(java.sql.ResultSet.class, "updateTimestamp", new Class[] {
			java.lang.String.class, java.sql.Timestamp.class });

	public void updateTimestamp(java.lang.String p0, java.sql.Timestamp p1) throws java.sql.SQLException {
		invoke(m137, new Object[] { p0, p1 });
	}

	/**
	 * public abstract void
	 * java.sql.ResultSet.updateTimestamp(int,java.sql.Timestamp) throws
	 * java.sql.SQLException
	 */
	private static final Method m138 = getMethod(java.sql.ResultSet.class, "updateTimestamp", new Class[] { int.class,
			java.sql.Timestamp.class });

	public void updateTimestamp(int p0, java.sql.Timestamp p1) throws java.sql.SQLException {
		invoke(m138, new Object[] { new Integer(p0), p1 });
	}
}
