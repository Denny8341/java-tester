/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package org.jtester.jdbcproxy.proxy.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.ParameterMetaData */
public class ParameterMetaDataProxy extends JdbcProxy implements java.sql.ParameterMetaData
{
  /**
   * Constructs a new ParameterMetaDataProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public ParameterMetaDataProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.ParameterMetaData.class, proxyObject);
  }

  /** public abstract java.lang.String java.sql.ParameterMetaData.getParameterClassName(int) throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.ParameterMetaData.class, "getParameterClassName", new Class[] {int.class});
  public java.lang.String getParameterClassName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m0, new Object[] {new Integer(p0)});
  }

  /** public abstract int java.sql.ParameterMetaData.getParameterCount() throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.ParameterMetaData.class, "getParameterCount", new Class[] {});
  public int getParameterCount() throws java.sql.SQLException
  {
    return ((Integer)invoke(m1, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.ParameterMetaData.getParameterMode(int) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.ParameterMetaData.class, "getParameterMode", new Class[] {int.class});
  public int getParameterMode(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m2, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract int java.sql.ParameterMetaData.getParameterType(int) throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.ParameterMetaData.class, "getParameterType", new Class[] {int.class});
  public int getParameterType(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m3, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract java.lang.String java.sql.ParameterMetaData.getParameterTypeName(int) throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.ParameterMetaData.class, "getParameterTypeName", new Class[] {int.class});
  public java.lang.String getParameterTypeName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m4, new Object[] {new Integer(p0)});
  }

  /** public abstract int java.sql.ParameterMetaData.getPrecision(int) throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.ParameterMetaData.class, "getPrecision", new Class[] {int.class});
  public int getPrecision(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m5, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract int java.sql.ParameterMetaData.getScale(int) throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.ParameterMetaData.class, "getScale", new Class[] {int.class});
  public int getScale(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m6, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract int java.sql.ParameterMetaData.isNullable(int) throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.ParameterMetaData.class, "isNullable", new Class[] {int.class});
  public int isNullable(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m7, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract boolean java.sql.ParameterMetaData.isSigned(int) throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.ParameterMetaData.class, "isSigned", new Class[] {int.class});
  public boolean isSigned(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m8, new Object[] {new Integer(p0)})).booleanValue();
  }
}
