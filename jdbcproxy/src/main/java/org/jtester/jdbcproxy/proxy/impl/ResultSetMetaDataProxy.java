/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package org.jtester.jdbcproxy.proxy.impl;

import java.lang.reflect.Method;
import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of java.sql.ResultSetMetaData */
public class ResultSetMetaDataProxy extends JdbcProxy implements java.sql.ResultSetMetaData
{
  /**
   * Constructs a new ResultSetMetaDataProxy object.
   * 
   * @param handler the proxy handler
   * @param proxyObject the proxy data
   */
  public ResultSetMetaDataProxy(Handler handler, Object proxyObject)
  {
    super(handler, java.sql.ResultSetMetaData.class, proxyObject);
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isReadOnly(int) throws java.sql.SQLException */
  private static final Method m0 = getMethod(java.sql.ResultSetMetaData.class, "isReadOnly", new Class[] {int.class});
  public boolean isReadOnly(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m0, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract int java.sql.ResultSetMetaData.getPrecision(int) throws java.sql.SQLException */
  private static final Method m1 = getMethod(java.sql.ResultSetMetaData.class, "getPrecision", new Class[] {int.class});
  public int getPrecision(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m1, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract int java.sql.ResultSetMetaData.getScale(int) throws java.sql.SQLException */
  private static final Method m2 = getMethod(java.sql.ResultSetMetaData.class, "getScale", new Class[] {int.class});
  public int getScale(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m2, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract int java.sql.ResultSetMetaData.isNullable(int) throws java.sql.SQLException */
  private static final Method m3 = getMethod(java.sql.ResultSetMetaData.class, "isNullable", new Class[] {int.class});
  public int isNullable(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m3, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isSigned(int) throws java.sql.SQLException */
  private static final Method m4 = getMethod(java.sql.ResultSetMetaData.class, "isSigned", new Class[] {int.class});
  public boolean isSigned(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m4, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract java.lang.String java.sql.ResultSetMetaData.getCatalogName(int) throws java.sql.SQLException */
  private static final Method m5 = getMethod(java.sql.ResultSetMetaData.class, "getCatalogName", new Class[] {int.class});
  public java.lang.String getCatalogName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m5, new Object[] {new Integer(p0)});
  }

  /** public abstract java.lang.String java.sql.ResultSetMetaData.getColumnClassName(int) throws java.sql.SQLException */
  private static final Method m6 = getMethod(java.sql.ResultSetMetaData.class, "getColumnClassName", new Class[] {int.class});
  public java.lang.String getColumnClassName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m6, new Object[] {new Integer(p0)});
  }

  /** public abstract int java.sql.ResultSetMetaData.getColumnCount() throws java.sql.SQLException */
  private static final Method m7 = getMethod(java.sql.ResultSetMetaData.class, "getColumnCount", new Class[] {});
  public int getColumnCount() throws java.sql.SQLException
  {
    return ((Integer)invoke(m7, new Object[] {})).intValue();
  }

  /** public abstract int java.sql.ResultSetMetaData.getColumnDisplaySize(int) throws java.sql.SQLException */
  private static final Method m8 = getMethod(java.sql.ResultSetMetaData.class, "getColumnDisplaySize", new Class[] {int.class});
  public int getColumnDisplaySize(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m8, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract java.lang.String java.sql.ResultSetMetaData.getColumnLabel(int) throws java.sql.SQLException */
  private static final Method m9 = getMethod(java.sql.ResultSetMetaData.class, "getColumnLabel", new Class[] {int.class});
  public java.lang.String getColumnLabel(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m9, new Object[] {new Integer(p0)});
  }

  /** public abstract java.lang.String java.sql.ResultSetMetaData.getColumnName(int) throws java.sql.SQLException */
  private static final Method m10 = getMethod(java.sql.ResultSetMetaData.class, "getColumnName", new Class[] {int.class});
  public java.lang.String getColumnName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m10, new Object[] {new Integer(p0)});
  }

  /** public abstract int java.sql.ResultSetMetaData.getColumnType(int) throws java.sql.SQLException */
  private static final Method m11 = getMethod(java.sql.ResultSetMetaData.class, "getColumnType", new Class[] {int.class});
  public int getColumnType(int p0) throws java.sql.SQLException
  {
    return ((Integer)invoke(m11, new Object[] {new Integer(p0)})).intValue();
  }

  /** public abstract java.lang.String java.sql.ResultSetMetaData.getColumnTypeName(int) throws java.sql.SQLException */
  private static final Method m12 = getMethod(java.sql.ResultSetMetaData.class, "getColumnTypeName", new Class[] {int.class});
  public java.lang.String getColumnTypeName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m12, new Object[] {new Integer(p0)});
  }

  /** public abstract java.lang.String java.sql.ResultSetMetaData.getSchemaName(int) throws java.sql.SQLException */
  private static final Method m13 = getMethod(java.sql.ResultSetMetaData.class, "getSchemaName", new Class[] {int.class});
  public java.lang.String getSchemaName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m13, new Object[] {new Integer(p0)});
  }

  /** public abstract java.lang.String java.sql.ResultSetMetaData.getTableName(int) throws java.sql.SQLException */
  private static final Method m14 = getMethod(java.sql.ResultSetMetaData.class, "getTableName", new Class[] {int.class});
  public java.lang.String getTableName(int p0) throws java.sql.SQLException
  {
    return (java.lang.String)invoke(m14, new Object[] {new Integer(p0)});
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isAutoIncrement(int) throws java.sql.SQLException */
  private static final Method m15 = getMethod(java.sql.ResultSetMetaData.class, "isAutoIncrement", new Class[] {int.class});
  public boolean isAutoIncrement(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m15, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isCaseSensitive(int) throws java.sql.SQLException */
  private static final Method m16 = getMethod(java.sql.ResultSetMetaData.class, "isCaseSensitive", new Class[] {int.class});
  public boolean isCaseSensitive(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m16, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isCurrency(int) throws java.sql.SQLException */
  private static final Method m17 = getMethod(java.sql.ResultSetMetaData.class, "isCurrency", new Class[] {int.class});
  public boolean isCurrency(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m17, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isDefinitelyWritable(int) throws java.sql.SQLException */
  private static final Method m18 = getMethod(java.sql.ResultSetMetaData.class, "isDefinitelyWritable", new Class[] {int.class});
  public boolean isDefinitelyWritable(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m18, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isSearchable(int) throws java.sql.SQLException */
  private static final Method m19 = getMethod(java.sql.ResultSetMetaData.class, "isSearchable", new Class[] {int.class});
  public boolean isSearchable(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m19, new Object[] {new Integer(p0)})).booleanValue();
  }

  /** public abstract boolean java.sql.ResultSetMetaData.isWritable(int) throws java.sql.SQLException */
  private static final Method m20 = getMethod(java.sql.ResultSetMetaData.class, "isWritable", new Class[] {int.class});
  public boolean isWritable(int p0) throws java.sql.SQLException
  {
    return ((Boolean)invoke(m20, new Object[] {new Integer(p0)})).booleanValue();
  }
}
