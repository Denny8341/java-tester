/*
 * This file is generated by nl.griffelservices.proxy.Generator.
 * Please do not modify this file manually.
 * All your changes will be deleted when this file is regenerated.
 */
package org.jtester.jdbcproxy.proxy.impl;

import java.lang.reflect.Method;
import java.sql.Blob;

import nl.griffelservices.proxy.Handler;

/** This class is a proxy implementation of Blob */
public class BlobProxy extends JdbcProxy implements Blob {
	/**
	 * public abstract byte[] Blob.getBytes(long,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m0_getBytes = getMethod(Blob.class, "getBytes", new Class[] { long.class, int.class });
	/** public abstract long Blob.length() throws java.sql.SQLException */
	private static final Method m1_length = getMethod(Blob.class, "length", new Class[] {});
	/**
	 * public abstract long Blob.position(Blob,long) throws
	 * java.sql.SQLException
	 */
	private static final Method m2_position = getMethod(Blob.class, "position", new Class[] { Blob.class, long.class });
	/**
	 * public abstract long Blob.position(byte[],long) throws
	 * java.sql.SQLException
	 */
	private static final Method m3_position = getMethod(Blob.class, "position", new Class[] { byte[].class, long.class });
	/**
	 * public abstract java.io.InputStream Blob.getBinaryStream() throws
	 * java.sql.SQLException
	 */
	private static final Method m4_getBinaryStream = getMethod(Blob.class, "getBinaryStream", new Class[] {});
	/**
	 * public abstract java.io.OutputStream Blob.setBinaryStream(long) throws
	 * java.sql.SQLException
	 */
	private static final Method m5_setBinaryStream = getMethod(Blob.class, "setBinaryStream", new Class[] { long.class });
	/**
	 * public abstract int Blob.setBytes(long,byte[]) throws
	 * java.sql.SQLException
	 */
	private static final Method m6_setBytes = getMethod(Blob.class, "setBytes", new Class[] { long.class, byte[].class });
	/**
	 * public abstract int Blob.setBytes(long,byte[],int,int) throws
	 * java.sql.SQLException
	 */
	private static final Method m7_setBytes = getMethod(Blob.class, "setBytes", new Class[] { long.class, byte[].class,
			int.class, int.class });

	/** public abstract void Blob.truncate(long) throws java.sql.SQLException */
	private static final Method m8_truncate = getMethod(Blob.class, "truncate", new Class[] { long.class });

	/**
	 * Constructs a new BlobProxy object.
	 * 
	 * @param handler
	 *            the proxy handler
	 * @param proxyObject
	 *            the proxy data
	 */
	public BlobProxy(Handler handler, Object proxyObject) {
		super(handler, Blob.class, proxyObject);
	}

	public byte[] getBytes(long p0, int p1) throws java.sql.SQLException {
		return (byte[]) invoke(m0_getBytes, new Object[] { new Long(p0), new Integer(p1) });
	}

	public long length() throws java.sql.SQLException {
		return ((Long) invoke(m1_length, new Object[] {})).longValue();
	}

	public long position(Blob p0, long p1) throws java.sql.SQLException {
		return ((Long) invoke(m2_position, new Object[] { p0, new Long(p1) })).longValue();
	}

	public long position(byte[] p0, long p1) throws java.sql.SQLException {
		return ((Long) invoke(m3_position, new Object[] { p0, new Long(p1) })).longValue();
	}

	public java.io.InputStream getBinaryStream() throws java.sql.SQLException {
		return (java.io.InputStream) invoke(m4_getBinaryStream, new Object[] {});
	}

	public java.io.OutputStream setBinaryStream(long p0) throws java.sql.SQLException {
		return (java.io.OutputStream) invoke(m5_setBinaryStream, new Object[] { new Long(p0) });
	}

	public int setBytes(long p0, byte[] p1) throws java.sql.SQLException {
		return ((Integer) invoke(m6_setBytes, new Object[] { new Long(p0), p1 })).intValue();
	}

	public int setBytes(long p0, byte[] p1, int p2, int p3) throws java.sql.SQLException {
		return ((Integer) invoke(m7_setBytes, new Object[] { new Long(p0), p1, new Integer(p2), new Integer(p3) })).intValue();
	}

	public void truncate(long p0) throws java.sql.SQLException {
		invoke(m8_truncate, new Object[] { new Long(p0) });
	}
}
