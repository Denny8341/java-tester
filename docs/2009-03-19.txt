一、测试的基本命名规范
		程序代码和测试代码最好写在一个工程中，通过不同的folder加以区别，项目打包时可以只打程序代码。
		下面是一个比较流行的代码分层结构。
		src->main->java
		         ->resources
       ->test->java
             ->resources
    main folder中放的是程序代码，test folder中放的是测试代码。java folder中放的是java 代码，resources folder中放的是相关的资源文件(*.xml,*.properties,...);
    
    ${package}被测试类的package名称
    ${class}被测试类名
    ${method}被测试方法名称
    那么对应的测试类也放在test->java下面的${package}包路径下
    测试类的命名为{class}Test,以测试类名开头，后跟Test。如果存在多个对应的测试类，则命名为{class}Test_{spec},{spec}简单的说明测试类目的。
    测试方法可以和被测试方法同名,或者命名为test_{method}，如果一个方法有多个测试方法，同样加_{spec}用来简单说明测试方法的不同目的。
    如果这个测试方法同时测多个方法，则可以命名为${method1}_${method2}_${spec}或test_${method1}_${method2}_spec。
    如果这个测试类和测试方法不是针对某个接口，则命名自由。
    上述的命名只是为了帮助你快速的找到你写的对应的测试方法，并不是强制性的约束。
    
    注意：测试类里面的非测试方法不要声明成public
          一定要保证测试代码的简洁性，不要在测试代码里写太多的复杂语句已经过多的业务逻辑。

	  如果可能，可以写一个eclipse插件来管理测试类
	  需要实现的基本功能，类似与eclipse中快捷键 ctrl + T，在一个class或method上一按这个快捷键，可以自动列出有哪些测试类和测试方法。
		最好也可以支持重构？（类名重构，方法名重构）
		目前我已经用java实现了扫描项目工程，找出符合上述命名规范的所有测试类的和测试方法。
		
二、测试的独立性和原子性
    一个测试最好是独立的和原子的，它不受外部环境的干扰，可以随时随地运行，以验证程序的正确性。
    我根据测试的独立性和原子性粗略的加以分类一下（目前还没有考虑成熟）
    1.纯粹的单元测试，只需要jdk就可以跑起来，这个是传统意义上的单元测试，没有任何外部资源。
         这种测试一般就是简单的内部api调用和api mock。
    2.需要提供数据库的测试。
         需要提供一个独立的测试数据库以和开发数据库分开，这一点很重要。要保证测试数据库数据可以随时清空和初始化数据。以保证测试程序的能够正确验证程序的正确性。
         如果条件许可，最好还应该给每个程序员一个测试数据库。
    3.如果测试case之间有依赖关系，要指明依赖路径，比如这个测试的运行需要取决于n个或n组前置测试的通过。
      @Test(dependsOnMethods = "depend")
    4.避免测试间的相互干扰。(spring bean的污染问题，mock注入的干扰)
         
三、测试的快速反馈机制
    1、测试的独立性和原子性保证了测试可以随时运行用于验证程序的正确性。
    2.最好搭建集成编译环境(CI系统）
    3.SVN checkin时，后台就可以进行编译和跑测试代码，一旦程序编译出错或测试代码不通过，则邮件或旺旺通知相应的开发人员.
    
四、何时写测试
    1、在写代码实现之前（TDD概念，这个实现起来好像好难度）。
    2、在写实现的同时并行开始写测试代码。
    3、在修改bug时，如果出现bug，则先写一个测试让这个测试重现这个bug，然后修复程序，让这个测试通过。
    4、测试代码需要日积月累，只有大量的测试代码和良好的覆盖，这才对保证程序的正确性有帮助。
    
五、测试工具的选择
    1、基本工具TestNG,JUnit
    2、断言工具(hamcrest,JTester).(断言的好坏决定了一个测试的优劣,前置断言,后置断言)
    2、mock框架JMock,EasyMock
    3、数据库测试工具DbUnit
    4、一个比较综合的框架Unitils,以及本人写的一个框架JTester
    5、覆盖率工具EclEmma,Cobertura（覆盖率的欺骗性。有比没有好，多比少好）
    
六、其他
    1、selenium
    2、fit/fitnesse

以上只是一些纲要性的表述，本人认为重要的是要先熟悉测试框架，学习测试语言。然后才可以着手写测试。	
工欲善其事，必先利其器！